%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.16.0

-ifndef(benchmarks_pb).
-define(benchmarks_pb, true).

-define(benchmarks_pb_gpb_version, "4.16.0").

-ifndef('PINGPONGREQUEST_PB_H').
-define('PINGPONGREQUEST_PB_H', true).
-record('PingPongRequest',
        {number_of_messages = 0 :: non_neg_integer() | undefined % = 1, optional, 64 bits
        }).
-endif.

-ifndef('THROUGHPUTPINGPONGREQUEST_PB_H').
-define('THROUGHPUTPINGPONGREQUEST_PB_H', true).
-record('ThroughputPingPongRequest',
        {messages_per_pair = 0  :: non_neg_integer() | undefined, % = 1, optional, 64 bits
         pipeline_size = 0      :: non_neg_integer() | undefined, % = 2, optional, 64 bits
         parallelism = 0        :: non_neg_integer() | undefined, % = 3, optional, 32 bits
         static_only = false    :: boolean() | 0 | 1 | undefined % = 4, optional
        }).
-endif.

-ifndef('ATOMICREGISTERREQUEST_PB_H').
-define('ATOMICREGISTERREQUEST_PB_H', true).
-record('AtomicRegisterRequest',
        {read_workload = 0.0    :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 1, optional
         write_workload = 0.0   :: float() | integer() | infinity | '-infinity' | nan | undefined, % = 2, optional
         partition_size = 0     :: non_neg_integer() | undefined, % = 3, optional, 32 bits
         number_of_keys = 0     :: non_neg_integer() | undefined % = 4, optional, 64 bits
        }).
-endif.

-ifndef('STREAMINGWINDOWSREQUEST_PB_H').
-define('STREAMINGWINDOWSREQUEST_PB_H', true).
-record('StreamingWindowsRequest',
        {number_of_partitions = 0 :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         batch_size = 0         :: non_neg_integer() | undefined, % = 2, optional, 64 bits
         window_size = []       :: iodata() | undefined, % = 3, optional
         number_of_windows = 0  :: non_neg_integer() | undefined, % = 4, optional, 64 bits
         window_size_amplification = 0 :: non_neg_integer() | undefined % = 5, optional, 64 bits
        }).
-endif.

-ifndef('SIZEDTHROUGHPUTREQUEST_PB_H').
-define('SIZEDTHROUGHPUTREQUEST_PB_H', true).
-record('SizedThroughputRequest',
        {message_size = 0       :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         batch_size = 0         :: non_neg_integer() | undefined, % = 2, optional, 32 bits
         number_of_batches = 0  :: non_neg_integer() | undefined, % = 3, optional, 32 bits
         number_of_pairs = 0    :: non_neg_integer() | undefined % = 4, optional, 32 bits
        }).
-endif.

-ifndef('FIBONACCIREQUEST_PB_H').
-define('FIBONACCIREQUEST_PB_H', true).
-record('FibonacciRequest',
        {fib_number = 0         :: non_neg_integer() | undefined % = 1, optional, 32 bits
        }).
-endif.

-ifndef('CHAMENEOSREQUEST_PB_H').
-define('CHAMENEOSREQUEST_PB_H', true).
-record('ChameneosRequest',
        {number_of_chameneos = 0 :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         number_of_meetings = 0 :: non_neg_integer() | undefined % = 2, optional, 64 bits
        }).
-endif.

-ifndef('APSPREQUEST_PB_H').
-define('APSPREQUEST_PB_H', true).
-record('APSPRequest',
        {number_of_nodes = 0    :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         block_size = 0         :: non_neg_integer() | undefined % = 2, optional, 32 bits
        }).
-endif.

-ifndef('ATOMICBROADCASTREQUEST_PB_H').
-define('ATOMICBROADCASTREQUEST_PB_H', true).
-record('AtomicBroadcastRequest',
        {algorithm = []         :: iodata() | undefined, % = 1, optional
         number_of_nodes = 0    :: non_neg_integer() | undefined, % = 2, optional, 64 bits
         number_of_proposals = 0 :: non_neg_integer() | undefined, % = 3, optional, 64 bits
         concurrent_proposals = 0 :: non_neg_integer() | undefined, % = 4, optional, 64 bits
         reconfiguration = []   :: iodata() | undefined, % = 5, optional
         reconfig_policy = []   :: iodata() | undefined % = 6, optional
        }).
-endif.

-ifndef('TESTRESULT_PB_H').
-define('TESTRESULT_PB_H', true).
-record('TestResult',
        {sealed_value           :: {success, benchmarks_pb:'TestSuccess'()} | {failure, benchmarks_pb:'TestFailure'()} | {not_implemented, benchmarks_pb:'NotImplemented'()} | undefined % oneof
        }).
-endif.

-ifndef('TESTSUCCESS_PB_H').
-define('TESTSUCCESS_PB_H', true).
-record('TestSuccess',
        {number_of_runs = 0     :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         run_results = []       :: [float() | integer() | infinity | '-infinity' | nan] | undefined % = 2, repeated
        }).
-endif.

-ifndef('TESTFAILURE_PB_H').
-define('TESTFAILURE_PB_H', true).
-record('TestFailure',
        {reason = []            :: iodata() | undefined % = 1, optional
        }).
-endif.

-ifndef('NOTIMPLEMENTED_PB_H').
-define('NOTIMPLEMENTED_PB_H', true).
-record('NotImplemented',
        {
        }).
-endif.

-ifndef('READYREQUEST_PB_H').
-define('READYREQUEST_PB_H', true).
-record('ReadyRequest',
        {
        }).
-endif.

-ifndef('READYRESPONSE_PB_H').
-define('READYRESPONSE_PB_H', true).
-record('ReadyResponse',
        {status = false         :: boolean() | 0 | 1 | undefined % = 1, optional
        }).
-endif.

-ifndef('SHUTDOWNREQUEST_PB_H').
-define('SHUTDOWNREQUEST_PB_H', true).
-record('ShutdownRequest',
        {force = false          :: boolean() | 0 | 1 | undefined % = 1, optional
        }).
-endif.

-ifndef('SHUTDOWNACK_PB_H').
-define('SHUTDOWNACK_PB_H', true).
-record('ShutdownAck',
        {
        }).
-endif.

-endif.
