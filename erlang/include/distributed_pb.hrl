%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.16.0

-ifndef(distributed_pb).
-define(distributed_pb, true).

-define(distributed_pb_gpb_version, "4.16.0").

-ifndef('CLIENTINFO_PB_H').
-define('CLIENTINFO_PB_H', true).
-record('ClientInfo',
        {address = []           :: iodata() | undefined, % = 1, optional
         port = 0               :: non_neg_integer() | undefined % = 2, optional, 32 bits
        }).
-endif.

-ifndef('CHECKINRESPONSE_PB_H').
-define('CHECKINRESPONSE_PB_H', true).
-record('CheckinResponse',
        {
        }).
-endif.

-ifndef('SETUPCONFIG_PB_H').
-define('SETUPCONFIG_PB_H', true).
-record('SetupConfig',
        {label = []             :: iodata() | undefined, % = 1, optional
         data = []              :: iodata() | undefined % = 2, optional
        }).
-endif.

-ifndef('SETUPRESPONSE_PB_H').
-define('SETUPRESPONSE_PB_H', true).
-record('SetupResponse',
        {success = false        :: boolean() | 0 | 1 | undefined, % = 1, optional
         data = []              :: iodata() | undefined % = 2, optional
        }).
-endif.

-ifndef('CLEANUPINFO_PB_H').
-define('CLEANUPINFO_PB_H', true).
-record('CleanupInfo',
        {final = false          :: boolean() | 0 | 1 | undefined % = 1, optional
        }).
-endif.

-ifndef('CLEANUPRESPONSE_PB_H').
-define('CLEANUPRESPONSE_PB_H', true).
-record('CleanupResponse',
        {
        }).
-endif.

-ifndef('TESTRESULT_PB_H').
-define('TESTRESULT_PB_H', true).
-record('TestResult',
        {sealed_value           :: {success, distributed_pb:'TestSuccess'()} | {failure, distributed_pb:'TestFailure'()} | {not_implemented, distributed_pb:'NotImplemented'()} | undefined % oneof
        }).
-endif.

-ifndef('TESTSUCCESS_PB_H').
-define('TESTSUCCESS_PB_H', true).
-record('TestSuccess',
        {number_of_runs = 0     :: non_neg_integer() | undefined, % = 1, optional, 32 bits
         run_results = []       :: [float() | integer() | infinity | '-infinity' | nan] | undefined % = 2, repeated
        }).
-endif.

-ifndef('TESTFAILURE_PB_H').
-define('TESTFAILURE_PB_H', true).
-record('TestFailure',
        {reason = []            :: iodata() | undefined % = 1, optional
        }).
-endif.

-ifndef('NOTIMPLEMENTED_PB_H').
-define('NOTIMPLEMENTED_PB_H', true).
-record('NotImplemented',
        {
        }).
-endif.

-ifndef('READYREQUEST_PB_H').
-define('READYREQUEST_PB_H', true).
-record('ReadyRequest',
        {
        }).
-endif.

-ifndef('READYRESPONSE_PB_H').
-define('READYRESPONSE_PB_H', true).
-record('ReadyResponse',
        {status = false         :: boolean() | 0 | 1 | undefined % = 1, optional
        }).
-endif.

-ifndef('SHUTDOWNREQUEST_PB_H').
-define('SHUTDOWNREQUEST_PB_H', true).
-record('ShutdownRequest',
        {force = false          :: boolean() | 0 | 1 | undefined % = 1, optional
        }).
-endif.

-ifndef('SHUTDOWNACK_PB_H').
-define('SHUTDOWNACK_PB_H', true).
-record('ShutdownAck',
        {
        }).
-endif.

-endif.
