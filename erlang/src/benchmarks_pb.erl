%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.1
-module(benchmarks_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("benchmarks_pb.hrl").
-include_lib("gpb/include/gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'PingPongRequest'() :: #'PingPongRequest'{}.

-type 'ThroughputPingPongRequest'() :: #'ThroughputPingPongRequest'{}.

-type 'AtomicRegisterRequest'() :: #'AtomicRegisterRequest'{}.

-type 'SizedThroughputRequest'() :: #'SizedThroughputRequest'{}.

-type 'TestResult'() :: #'TestResult'{}.

-type 'TestSuccess'() :: #'TestSuccess'{}.

-type 'TestFailure'() :: #'TestFailure'{}.

-type 'NotImplemented'() :: #'NotImplemented'{}.

-type 'ReadyRequest'() :: #'ReadyRequest'{}.

-type 'ReadyResponse'() :: #'ReadyResponse'{}.

-type 'ShutdownRequest'() :: #'ShutdownRequest'{}.

-type 'ShutdownAck'() :: #'ShutdownAck'{}.

-export_type(['PingPongRequest'/0, 'ThroughputPingPongRequest'/0, 'AtomicRegisterRequest'/0, 'SizedThroughputRequest'/0, 'TestResult'/0, 'TestSuccess'/0, 'TestFailure'/0, 'NotImplemented'/0, 'ReadyRequest'/0, 'ReadyResponse'/0, 'ShutdownRequest'/0, 'ShutdownAck'/0]).

-spec encode_msg(#'PingPongRequest'{} | #'ThroughputPingPongRequest'{} | #'AtomicRegisterRequest'{} | #'SizedThroughputRequest'{} | #'TestResult'{} | #'TestSuccess'{} | #'TestFailure'{} | #'NotImplemented'{} | #'ReadyRequest'{} | #'ReadyResponse'{} | #'ShutdownRequest'{} | #'ShutdownAck'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'PingPongRequest'{} | #'ThroughputPingPongRequest'{} | #'AtomicRegisterRequest'{} | #'SizedThroughputRequest'{} | #'TestResult'{} | #'TestSuccess'{} | #'TestFailure'{} | #'NotImplemented'{} | #'ReadyRequest'{} | #'ReadyResponse'{} | #'ShutdownRequest'{} | #'ShutdownAck'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'PingPongRequest'{} | #'ThroughputPingPongRequest'{} | #'AtomicRegisterRequest'{} | #'SizedThroughputRequest'{} | #'TestResult'{} | #'TestSuccess'{} | #'TestFailure'{} | #'NotImplemented'{} | #'ReadyRequest'{} | #'ReadyResponse'{} | #'ShutdownRequest'{} | #'ShutdownAck'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'PingPongRequest' ->
            encode_msg_PingPongRequest(id(Msg, TrUserData),
                                       TrUserData);
        'ThroughputPingPongRequest' ->
            encode_msg_ThroughputPingPongRequest(id(Msg,
                                                    TrUserData),
                                                 TrUserData);
        'AtomicRegisterRequest' ->
            encode_msg_AtomicRegisterRequest(id(Msg, TrUserData),
                                             TrUserData);
        'SizedThroughputRequest' ->
            encode_msg_SizedThroughputRequest(id(Msg, TrUserData),
                                              TrUserData);
        'TestResult' ->
            encode_msg_TestResult(id(Msg, TrUserData), TrUserData);
        'TestSuccess' ->
            encode_msg_TestSuccess(id(Msg, TrUserData), TrUserData);
        'TestFailure' ->
            encode_msg_TestFailure(id(Msg, TrUserData), TrUserData);
        'NotImplemented' ->
            encode_msg_NotImplemented(id(Msg, TrUserData),
                                      TrUserData);
        'ReadyRequest' ->
            encode_msg_ReadyRequest(id(Msg, TrUserData),
                                    TrUserData);
        'ReadyResponse' ->
            encode_msg_ReadyResponse(id(Msg, TrUserData),
                                     TrUserData);
        'ShutdownRequest' ->
            encode_msg_ShutdownRequest(id(Msg, TrUserData),
                                       TrUserData);
        'ShutdownAck' ->
            encode_msg_ShutdownAck(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_PingPongRequest(Msg, TrUserData) ->
    encode_msg_PingPongRequest(Msg, <<>>, TrUserData).


encode_msg_PingPongRequest(#'PingPongRequest'{number_of_messages
                                                  = F1},
                           Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
               end
           end
    end.

encode_msg_ThroughputPingPongRequest(Msg, TrUserData) ->
    encode_msg_ThroughputPingPongRequest(Msg,
                                         <<>>,
                                         TrUserData).


encode_msg_ThroughputPingPongRequest(#'ThroughputPingPongRequest'{messages_per_pair
                                                                      = F1,
                                                                  pipeline_size
                                                                      = F2,
                                                                  parallelism =
                                                                      F3,
                                                                  static_only =
                                                                      F4},
                                     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               if TrF4 =:= false -> B3;
                  true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
               end
           end
    end.

encode_msg_AtomicRegisterRequest(Msg, TrUserData) ->
    encode_msg_AtomicRegisterRequest(Msg, <<>>, TrUserData).


encode_msg_AtomicRegisterRequest(#'AtomicRegisterRequest'{read_workload
                                                              = F1,
                                                          write_workload = F2,
                                                          partition_size = F3,
                                                          number_of_keys = F4},
                                 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0.0 -> Bin;
                       true ->
                           e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0.0 -> B1;
                       true ->
                           e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               if TrF4 =:= 0 -> B3;
                  true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
               end
           end
    end.

encode_msg_SizedThroughputRequest(Msg, TrUserData) ->
    encode_msg_SizedThroughputRequest(Msg,
                                      <<>>,
                                      TrUserData).


encode_msg_SizedThroughputRequest(#'SizedThroughputRequest'{message_size
                                                                = F1,
                                                            batch_size = F2,
                                                            number_of_batches =
                                                                F3,
                                                            number_of_pairs =
                                                                F4},
                                  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = if F3 == undefined -> B2;
            true ->
                begin
                    TrF3 = id(F3, TrUserData),
                    if TrF3 =:= 0 -> B2;
                       true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                    end
                end
         end,
    if F4 == undefined -> B3;
       true ->
           begin
               TrF4 = id(F4, TrUserData),
               if TrF4 =:= 0 -> B3;
                  true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
               end
           end
    end.

encode_msg_TestResult(Msg, TrUserData) ->
    encode_msg_TestResult(Msg, <<>>, TrUserData).


encode_msg_TestResult(#'TestResult'{sealed_value = F1},
                      Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
           case id(F1, TrUserData) of
               {success, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_TestResult_success(TrTF1,
                                                   <<Bin/binary, 10>>,
                                                   TrUserData)
                   end;
               {failure, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_TestResult_failure(TrTF1,
                                                   <<Bin/binary, 18>>,
                                                   TrUserData)
                   end;
               {not_implemented, TF1} ->
                   begin
                       TrTF1 = id(TF1, TrUserData),
                       e_mfield_TestResult_not_implemented(TrTF1,
                                                           <<Bin/binary, 26>>,
                                                           TrUserData)
                   end
           end
    end.

encode_msg_TestSuccess(Msg, TrUserData) ->
    encode_msg_TestSuccess(Msg, <<>>, TrUserData).


encode_msg_TestSuccess(#'TestSuccess'{number_of_runs =
                                          F1,
                                      run_results = F2},
                       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= 0 -> Bin;
                       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                    end
                end
         end,
    begin
        TrF2 = id(F2, TrUserData),
        if TrF2 == [] -> B1;
           true ->
               e_field_TestSuccess_run_results(TrF2, B1, TrUserData)
        end
    end.

encode_msg_TestFailure(Msg, TrUserData) ->
    encode_msg_TestFailure(Msg, <<>>, TrUserData).


encode_msg_TestFailure(#'TestFailure'{reason = F1}, Bin,
                       TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               case is_empty_string(TrF1) of
                   true -> Bin;
                   false ->
                       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
               end
           end
    end.

encode_msg_NotImplemented(_Msg, _TrUserData) -> <<>>.

encode_msg_ReadyRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_ReadyResponse(Msg, TrUserData) ->
    encode_msg_ReadyResponse(Msg, <<>>, TrUserData).


encode_msg_ReadyResponse(#'ReadyResponse'{status = F1},
                         Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= false -> Bin;
                  true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
               end
           end
    end.

encode_msg_ShutdownRequest(Msg, TrUserData) ->
    encode_msg_ShutdownRequest(Msg, <<>>, TrUserData).


encode_msg_ShutdownRequest(#'ShutdownRequest'{force =
                                                  F1},
                           Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= false -> Bin;
                  true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
               end
           end
    end.

encode_msg_ShutdownAck(_Msg, _TrUserData) -> <<>>.

e_mfield_TestResult_success(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TestSuccess(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TestResult_failure(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TestFailure(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TestResult_not_implemented(_Msg, Bin,
                                    _TrUserData) ->
    <<Bin/binary, 0>>.

e_field_TestSuccess_run_results(Elems, Bin, TrUserData)
    when Elems =/= [] ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(length(Elems) * 8, Bin2),
    e_pfield_TestSuccess_run_results(Elems,
                                     Bin3,
                                     TrUserData);
e_field_TestSuccess_run_results([], Bin, _TrUserData) ->
    Bin.

e_pfield_TestSuccess_run_results([V | Rest], Bin,
                                 TrUserData) ->
    TrV = id(V, TrUserData),
    Bin2 = if is_number(TrV) ->
                  <<Bin/binary, TrV:64/float-little>>;
              TrV =:= infinity -> <<Bin/binary, 0:48, 240, 127>>;
              TrV =:= '-infinity' -> <<Bin/binary, 0:48, 240, 255>>;
              TrV =:= nan -> <<Bin/binary, 0:48, 248, 127>>
           end,
    e_pfield_TestSuccess_run_results(Rest,
                                     Bin2,
                                     TrUserData);
e_pfield_TestSuccess_run_results([], Bin,
                                 _TrUserData) ->
    Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('PingPongRequest', Bin, TrUserData) ->
    id(decode_msg_PingPongRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ThroughputPingPongRequest', Bin,
                  TrUserData) ->
    id(decode_msg_ThroughputPingPongRequest(Bin,
                                            TrUserData),
       TrUserData);
decode_msg_2_doit('AtomicRegisterRequest', Bin,
                  TrUserData) ->
    id(decode_msg_AtomicRegisterRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('SizedThroughputRequest', Bin,
                  TrUserData) ->
    id(decode_msg_SizedThroughputRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('TestResult', Bin, TrUserData) ->
    id(decode_msg_TestResult(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TestSuccess', Bin, TrUserData) ->
    id(decode_msg_TestSuccess(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TestFailure', Bin, TrUserData) ->
    id(decode_msg_TestFailure(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NotImplemented', Bin, TrUserData) ->
    id(decode_msg_NotImplemented(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ReadyRequest', Bin, TrUserData) ->
    id(decode_msg_ReadyRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ReadyResponse', Bin, TrUserData) ->
    id(decode_msg_ReadyResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ShutdownRequest', Bin, TrUserData) ->
    id(decode_msg_ShutdownRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ShutdownAck', Bin, TrUserData) ->
    id(decode_msg_ShutdownAck(Bin, TrUserData), TrUserData).



decode_msg_PingPongRequest(Bin, TrUserData) ->
    dfp_read_field_def_PingPongRequest(Bin,
                                       0,
                                       0,
                                       id(0, TrUserData),
                                       TrUserData).

dfp_read_field_def_PingPongRequest(<<8, Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    d_field_PingPongRequest_number_of_messages(Rest,
                                               Z1,
                                               Z2,
                                               F@_1,
                                               TrUserData);
dfp_read_field_def_PingPongRequest(<<>>, 0, 0, F@_1,
                                   _) ->
    #'PingPongRequest'{number_of_messages = F@_1};
dfp_read_field_def_PingPongRequest(Other, Z1, Z2, F@_1,
                                   TrUserData) ->
    dg_read_field_def_PingPongRequest(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData).

dg_read_field_def_PingPongRequest(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PingPongRequest(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      TrUserData);
dg_read_field_def_PingPongRequest(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_PingPongRequest_number_of_messages(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_PingPongRequest(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                1 ->
                    skip_64_PingPongRequest(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_PingPongRequest(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                3 ->
                    skip_group_PingPongRequest(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               TrUserData);
                5 ->
                    skip_32_PingPongRequest(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PingPongRequest(<<>>, 0, 0, F@_1,
                                  _) ->
    #'PingPongRequest'{number_of_messages = F@_1}.

d_field_PingPongRequest_number_of_messages(<<1:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_PingPongRequest_number_of_messages(Rest,
                                               N + 7,
                                               X bsl N + Acc,
                                               F@_1,
                                               TrUserData);
d_field_PingPongRequest_number_of_messages(<<0:1, X:7,
                                             Rest/binary>>,
                                           N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_PingPongRequest(RestF,
                                       0,
                                       0,
                                       NewFValue,
                                       TrUserData).

skip_varint_PingPongRequest(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, TrUserData) ->
    skip_varint_PingPongRequest(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                TrUserData);
skip_varint_PingPongRequest(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_PingPongRequest(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_length_delimited_PingPongRequest(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_PingPongRequest(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
skip_length_delimited_PingPongRequest(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PingPongRequest(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData).

skip_group_PingPongRequest(Bin, FNum, Z2, F@_1,
                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PingPongRequest(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_32_PingPongRequest(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, TrUserData) ->
    dfp_read_field_def_PingPongRequest(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_64_PingPongRequest(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, TrUserData) ->
    dfp_read_field_def_PingPongRequest(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

decode_msg_ThroughputPingPongRequest(Bin, TrUserData) ->
    dfp_read_field_def_ThroughputPingPongRequest(Bin,
                                                 0,
                                                 0,
                                                 id(0, TrUserData),
                                                 id(0, TrUserData),
                                                 id(0, TrUserData),
                                                 id(false, TrUserData),
                                                 TrUserData).

dfp_read_field_def_ThroughputPingPongRequest(<<8,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    d_field_ThroughputPingPongRequest_messages_per_pair(Rest,
                                                        Z1,
                                                        Z2,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        TrUserData);
dfp_read_field_def_ThroughputPingPongRequest(<<16,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    d_field_ThroughputPingPongRequest_pipeline_size(Rest,
                                                    Z1,
                                                    Z2,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
dfp_read_field_def_ThroughputPingPongRequest(<<24,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    d_field_ThroughputPingPongRequest_parallelism(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  TrUserData);
dfp_read_field_def_ThroughputPingPongRequest(<<32,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    d_field_ThroughputPingPongRequest_static_only(Rest,
                                                  Z1,
                                                  Z2,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  TrUserData);
dfp_read_field_def_ThroughputPingPongRequest(<<>>, 0, 0,
                                             F@_1, F@_2, F@_3, F@_4, _) ->
    #'ThroughputPingPongRequest'{messages_per_pair = F@_1,
                                 pipeline_size = F@_2, parallelism = F@_3,
                                 static_only = F@_4};
dfp_read_field_def_ThroughputPingPongRequest(Other, Z1,
                                             Z2, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    dg_read_field_def_ThroughputPingPongRequest(Other,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData).

dg_read_field_def_ThroughputPingPongRequest(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ThroughputPingPongRequest(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
dg_read_field_def_ThroughputPingPongRequest(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_ThroughputPingPongRequest_messages_per_pair(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                TrUserData);
        16 ->
            d_field_ThroughputPingPongRequest_pipeline_size(Rest,
                                                            0,
                                                            0,
                                                            F@_1,
                                                            F@_2,
                                                            F@_3,
                                                            F@_4,
                                                            TrUserData);
        24 ->
            d_field_ThroughputPingPongRequest_parallelism(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
        32 ->
            d_field_ThroughputPingPongRequest_static_only(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_ThroughputPingPongRequest(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          F@_2,
                                                          F@_3,
                                                          F@_4,
                                                          TrUserData);
                1 ->
                    skip_64_ThroughputPingPongRequest(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
                2 ->
                    skip_length_delimited_ThroughputPingPongRequest(Rest,
                                                                    0,
                                                                    0,
                                                                    F@_1,
                                                                    F@_2,
                                                                    F@_3,
                                                                    F@_4,
                                                                    TrUserData);
                3 ->
                    skip_group_ThroughputPingPongRequest(Rest,
                                                         Key bsr 3,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         TrUserData);
                5 ->
                    skip_32_ThroughputPingPongRequest(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData)
            end
    end;
dg_read_field_def_ThroughputPingPongRequest(<<>>, 0, 0,
                                            F@_1, F@_2, F@_3, F@_4, _) ->
    #'ThroughputPingPongRequest'{messages_per_pair = F@_1,
                                 pipeline_size = F@_2, parallelism = F@_3,
                                 static_only = F@_4}.

d_field_ThroughputPingPongRequest_messages_per_pair(<<1:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, F@_1, F@_2, F@_3,
                                                    F@_4, TrUserData)
    when N < 57 ->
    d_field_ThroughputPingPongRequest_messages_per_pair(Rest,
                                                        N + 7,
                                                        X bsl N + Acc,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        TrUserData);
d_field_ThroughputPingPongRequest_messages_per_pair(<<0:1,
                                                      X:7, Rest/binary>>,
                                                    N, Acc, _, F@_2, F@_3, F@_4,
                                                    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_ThroughputPingPongRequest(RestF,
                                                 0,
                                                 0,
                                                 NewFValue,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

d_field_ThroughputPingPongRequest_pipeline_size(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData)
    when N < 57 ->
    d_field_ThroughputPingPongRequest_pipeline_size(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
d_field_ThroughputPingPongRequest_pipeline_size(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, _, F@_3, F@_4,
                                                TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_ThroughputPingPongRequest(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 NewFValue,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

d_field_ThroughputPingPongRequest_parallelism(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              TrUserData)
    when N < 57 ->
    d_field_ThroughputPingPongRequest_parallelism(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  TrUserData);
d_field_ThroughputPingPongRequest_parallelism(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, _, F@_4,
                                              TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_ThroughputPingPongRequest(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 NewFValue,
                                                 F@_4,
                                                 TrUserData).

d_field_ThroughputPingPongRequest_static_only(<<1:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, F@_4,
                                              TrUserData)
    when N < 57 ->
    d_field_ThroughputPingPongRequest_static_only(Rest,
                                                  N + 7,
                                                  X bsl N + Acc,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  TrUserData);
d_field_ThroughputPingPongRequest_static_only(<<0:1,
                                                X:7, Rest/binary>>,
                                              N, Acc, F@_1, F@_2, F@_3, _,
                                              TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_ThroughputPingPongRequest(RestF,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 NewFValue,
                                                 TrUserData).

skip_varint_ThroughputPingPongRequest(<<1:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                      TrUserData) ->
    skip_varint_ThroughputPingPongRequest(Rest,
                                          Z1,
                                          Z2,
                                          F@_1,
                                          F@_2,
                                          F@_3,
                                          F@_4,
                                          TrUserData);
skip_varint_ThroughputPingPongRequest(<<0:1, _:7,
                                        Rest/binary>>,
                                      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                      TrUserData) ->
    dfp_read_field_def_ThroughputPingPongRequest(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

skip_length_delimited_ThroughputPingPongRequest(<<1:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData)
    when N < 57 ->
    skip_length_delimited_ThroughputPingPongRequest(Rest,
                                                    N + 7,
                                                    X bsl N + Acc,
                                                    F@_1,
                                                    F@_2,
                                                    F@_3,
                                                    F@_4,
                                                    TrUserData);
skip_length_delimited_ThroughputPingPongRequest(<<0:1,
                                                  X:7, Rest/binary>>,
                                                N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ThroughputPingPongRequest(Rest2,
                                                 0,
                                                 0,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

skip_group_ThroughputPingPongRequest(Bin, FNum, Z2,
                                     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ThroughputPingPongRequest(Rest,
                                                 0,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

skip_32_ThroughputPingPongRequest(<<_:32, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ThroughputPingPongRequest(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

skip_64_ThroughputPingPongRequest(<<_:64, Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_ThroughputPingPongRequest(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData).

decode_msg_AtomicRegisterRequest(Bin, TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Bin,
                                             0,
                                             0,
                                             id(0.0, TrUserData),
                                             id(0.0, TrUserData),
                                             id(0, TrUserData),
                                             id(0, TrUserData),
                                             TrUserData).

dfp_read_field_def_AtomicRegisterRequest(<<13,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                         TrUserData) ->
    d_field_AtomicRegisterRequest_read_workload(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
dfp_read_field_def_AtomicRegisterRequest(<<21,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                         TrUserData) ->
    d_field_AtomicRegisterRequest_write_workload(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData);
dfp_read_field_def_AtomicRegisterRequest(<<24,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                         TrUserData) ->
    d_field_AtomicRegisterRequest_partition_size(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData);
dfp_read_field_def_AtomicRegisterRequest(<<32,
                                           Rest/binary>>,
                                         Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                         TrUserData) ->
    d_field_AtomicRegisterRequest_number_of_keys(Rest,
                                                 Z1,
                                                 Z2,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData);
dfp_read_field_def_AtomicRegisterRequest(<<>>, 0, 0,
                                         F@_1, F@_2, F@_3, F@_4, _) ->
    #'AtomicRegisterRequest'{read_workload = F@_1,
                             write_workload = F@_2, partition_size = F@_3,
                             number_of_keys = F@_4};
dfp_read_field_def_AtomicRegisterRequest(Other, Z1, Z2,
                                         F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_AtomicRegisterRequest(Other,
                                            Z1,
                                            Z2,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            TrUserData).

dg_read_field_def_AtomicRegisterRequest(<<1:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, F@_4,
                                        TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AtomicRegisterRequest(Rest,
                                            N + 7,
                                            X bsl N + Acc,
                                            F@_1,
                                            F@_2,
                                            F@_3,
                                            F@_4,
                                            TrUserData);
dg_read_field_def_AtomicRegisterRequest(<<0:1, X:7,
                                          Rest/binary>>,
                                        N, Acc, F@_1, F@_2, F@_3, F@_4,
                                        TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        13 ->
            d_field_AtomicRegisterRequest_read_workload(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        TrUserData);
        21 ->
            d_field_AtomicRegisterRequest_write_workload(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         TrUserData);
        24 ->
            d_field_AtomicRegisterRequest_partition_size(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         TrUserData);
        32 ->
            d_field_AtomicRegisterRequest_number_of_keys(Rest,
                                                         0,
                                                         0,
                                                         F@_1,
                                                         F@_2,
                                                         F@_3,
                                                         F@_4,
                                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_AtomicRegisterRequest(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
                1 ->
                    skip_64_AtomicRegisterRequest(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  TrUserData);
                2 ->
                    skip_length_delimited_AtomicRegisterRequest(Rest,
                                                                0,
                                                                0,
                                                                F@_1,
                                                                F@_2,
                                                                F@_3,
                                                                F@_4,
                                                                TrUserData);
                3 ->
                    skip_group_AtomicRegisterRequest(Rest,
                                                     Key bsr 3,
                                                     0,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData);
                5 ->
                    skip_32_AtomicRegisterRequest(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  F@_3,
                                                  F@_4,
                                                  TrUserData)
            end
    end;
dg_read_field_def_AtomicRegisterRequest(<<>>, 0, 0,
                                        F@_1, F@_2, F@_3, F@_4, _) ->
    #'AtomicRegisterRequest'{read_workload = F@_1,
                             write_workload = F@_2, partition_size = F@_3,
                             number_of_keys = F@_4}.

d_field_AtomicRegisterRequest_read_workload(<<0:16, 128,
                                              127, Rest/binary>>,
                                            Z1, Z2, _, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             id(infinity, TrUserData),
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData);
d_field_AtomicRegisterRequest_read_workload(<<0:16, 128,
                                              255, Rest/binary>>,
                                            Z1, Z2, _, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             id('-infinity', TrUserData),
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData);
d_field_AtomicRegisterRequest_read_workload(<<_:16, 1:1,
                                              _:7, _:1, 127:7, Rest/binary>>,
                                            Z1, Z2, _, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             id(nan, TrUserData),
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData);
d_field_AtomicRegisterRequest_read_workload(<<Value:32/little-float,
                                              Rest/binary>>,
                                            Z1, Z2, _, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             id(Value, TrUserData),
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData).

d_field_AtomicRegisterRequest_write_workload(<<0:16,
                                               128, 127, Rest/binary>>,
                                             Z1, Z2, F@_1, _, F@_3, F@_4,
                                             TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             id(infinity, TrUserData),
                                             F@_3,
                                             F@_4,
                                             TrUserData);
d_field_AtomicRegisterRequest_write_workload(<<0:16,
                                               128, 255, Rest/binary>>,
                                             Z1, Z2, F@_1, _, F@_3, F@_4,
                                             TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             id('-infinity', TrUserData),
                                             F@_3,
                                             F@_4,
                                             TrUserData);
d_field_AtomicRegisterRequest_write_workload(<<_:16,
                                               1:1, _:7, _:1, 127:7,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, _, F@_3, F@_4,
                                             TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             id(nan, TrUserData),
                                             F@_3,
                                             F@_4,
                                             TrUserData);
d_field_AtomicRegisterRequest_write_workload(<<Value:32/little-float,
                                               Rest/binary>>,
                                             Z1, Z2, F@_1, _, F@_3, F@_4,
                                             TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             id(Value, TrUserData),
                                             F@_3,
                                             F@_4,
                                             TrUserData).

d_field_AtomicRegisterRequest_partition_size(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData)
    when N < 57 ->
    d_field_AtomicRegisterRequest_partition_size(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData);
d_field_AtomicRegisterRequest_partition_size(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, _, F@_4,
                                             TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_AtomicRegisterRequest(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             NewFValue,
                                             F@_4,
                                             TrUserData).

d_field_AtomicRegisterRequest_number_of_keys(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData)
    when N < 57 ->
    d_field_AtomicRegisterRequest_number_of_keys(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData);
d_field_AtomicRegisterRequest_number_of_keys(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, _,
                                             TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_AtomicRegisterRequest(RestF,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             NewFValue,
                                             TrUserData).

skip_varint_AtomicRegisterRequest(<<1:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_AtomicRegisterRequest(Rest,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      F@_2,
                                      F@_3,
                                      F@_4,
                                      TrUserData);
skip_varint_AtomicRegisterRequest(<<0:1, _:7,
                                    Rest/binary>>,
                                  Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData).

skip_length_delimited_AtomicRegisterRequest(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData)
    when N < 57 ->
    skip_length_delimited_AtomicRegisterRequest(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
skip_length_delimited_AtomicRegisterRequest(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AtomicRegisterRequest(Rest2,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData).

skip_group_AtomicRegisterRequest(Bin, FNum, Z2, F@_1,
                                 F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             0,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData).

skip_32_AtomicRegisterRequest(<<_:32, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData).

skip_64_AtomicRegisterRequest(<<_:64, Rest/binary>>, Z1,
                              Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_AtomicRegisterRequest(Rest,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData).

decode_msg_SizedThroughputRequest(Bin, TrUserData) ->
    dfp_read_field_def_SizedThroughputRequest(Bin,
                                              0,
                                              0,
                                              id(0, TrUserData),
                                              id(0, TrUserData),
                                              id(0, TrUserData),
                                              id(0, TrUserData),
                                              TrUserData).

dfp_read_field_def_SizedThroughputRequest(<<8,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData) ->
    d_field_SizedThroughputRequest_message_size(Rest,
                                                Z1,
                                                Z2,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
dfp_read_field_def_SizedThroughputRequest(<<16,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData) ->
    d_field_SizedThroughputRequest_batch_size(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData);
dfp_read_field_def_SizedThroughputRequest(<<24,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData) ->
    d_field_SizedThroughputRequest_number_of_batches(Rest,
                                                     Z1,
                                                     Z2,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData);
dfp_read_field_def_SizedThroughputRequest(<<32,
                                            Rest/binary>>,
                                          Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData) ->
    d_field_SizedThroughputRequest_number_of_pairs(Rest,
                                                   Z1,
                                                   Z2,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData);
dfp_read_field_def_SizedThroughputRequest(<<>>, 0, 0,
                                          F@_1, F@_2, F@_3, F@_4, _) ->
    #'SizedThroughputRequest'{message_size = F@_1,
                              batch_size = F@_2, number_of_batches = F@_3,
                              number_of_pairs = F@_4};
dfp_read_field_def_SizedThroughputRequest(Other, Z1, Z2,
                                          F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_SizedThroughputRequest(Other,
                                             Z1,
                                             Z2,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData).

dg_read_field_def_SizedThroughputRequest(<<1:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, F@_4,
                                         TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SizedThroughputRequest(Rest,
                                             N + 7,
                                             X bsl N + Acc,
                                             F@_1,
                                             F@_2,
                                             F@_3,
                                             F@_4,
                                             TrUserData);
dg_read_field_def_SizedThroughputRequest(<<0:1, X:7,
                                           Rest/binary>>,
                                         N, Acc, F@_1, F@_2, F@_3, F@_4,
                                         TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_SizedThroughputRequest_message_size(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        F@_2,
                                                        F@_3,
                                                        F@_4,
                                                        TrUserData);
        16 ->
            d_field_SizedThroughputRequest_batch_size(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
        24 ->
            d_field_SizedThroughputRequest_number_of_batches(Rest,
                                                             0,
                                                             0,
                                                             F@_1,
                                                             F@_2,
                                                             F@_3,
                                                             F@_4,
                                                             TrUserData);
        32 ->
            d_field_SizedThroughputRequest_number_of_pairs(Rest,
                                                           0,
                                                           0,
                                                           F@_1,
                                                           F@_2,
                                                           F@_3,
                                                           F@_4,
                                                           TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_SizedThroughputRequest(Rest,
                                                       0,
                                                       0,
                                                       F@_1,
                                                       F@_2,
                                                       F@_3,
                                                       F@_4,
                                                       TrUserData);
                1 ->
                    skip_64_SizedThroughputRequest(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData);
                2 ->
                    skip_length_delimited_SizedThroughputRequest(Rest,
                                                                 0,
                                                                 0,
                                                                 F@_1,
                                                                 F@_2,
                                                                 F@_3,
                                                                 F@_4,
                                                                 TrUserData);
                3 ->
                    skip_group_SizedThroughputRequest(Rest,
                                                      Key bsr 3,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      F@_3,
                                                      F@_4,
                                                      TrUserData);
                5 ->
                    skip_32_SizedThroughputRequest(Rest,
                                                   0,
                                                   0,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData)
            end
    end;
dg_read_field_def_SizedThroughputRequest(<<>>, 0, 0,
                                         F@_1, F@_2, F@_3, F@_4, _) ->
    #'SizedThroughputRequest'{message_size = F@_1,
                              batch_size = F@_2, number_of_batches = F@_3,
                              number_of_pairs = F@_4}.

d_field_SizedThroughputRequest_message_size(<<1:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, F@_1, F@_2, F@_3, F@_4,
                                            TrUserData)
    when N < 57 ->
    d_field_SizedThroughputRequest_message_size(Rest,
                                                N + 7,
                                                X bsl N + Acc,
                                                F@_1,
                                                F@_2,
                                                F@_3,
                                                F@_4,
                                                TrUserData);
d_field_SizedThroughputRequest_message_size(<<0:1, X:7,
                                              Rest/binary>>,
                                            N, Acc, _, F@_2, F@_3, F@_4,
                                            TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_SizedThroughputRequest(RestF,
                                              0,
                                              0,
                                              NewFValue,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

d_field_SizedThroughputRequest_batch_size(<<1:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, F@_2, F@_3, F@_4,
                                          TrUserData)
    when N < 57 ->
    d_field_SizedThroughputRequest_batch_size(Rest,
                                              N + 7,
                                              X bsl N + Acc,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData);
d_field_SizedThroughputRequest_batch_size(<<0:1, X:7,
                                            Rest/binary>>,
                                          N, Acc, F@_1, _, F@_3, F@_4,
                                          TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_SizedThroughputRequest(RestF,
                                              0,
                                              0,
                                              F@_1,
                                              NewFValue,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

d_field_SizedThroughputRequest_number_of_batches(<<1:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, F@_3, F@_4,
                                                 TrUserData)
    when N < 57 ->
    d_field_SizedThroughputRequest_number_of_batches(Rest,
                                                     N + 7,
                                                     X bsl N + Acc,
                                                     F@_1,
                                                     F@_2,
                                                     F@_3,
                                                     F@_4,
                                                     TrUserData);
d_field_SizedThroughputRequest_number_of_batches(<<0:1,
                                                   X:7, Rest/binary>>,
                                                 N, Acc, F@_1, F@_2, _, F@_4,
                                                 TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_SizedThroughputRequest(RestF,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              NewFValue,
                                              F@_4,
                                              TrUserData).

d_field_SizedThroughputRequest_number_of_pairs(<<1:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, F@_4,
                                               TrUserData)
    when N < 57 ->
    d_field_SizedThroughputRequest_number_of_pairs(Rest,
                                                   N + 7,
                                                   X bsl N + Acc,
                                                   F@_1,
                                                   F@_2,
                                                   F@_3,
                                                   F@_4,
                                                   TrUserData);
d_field_SizedThroughputRequest_number_of_pairs(<<0:1,
                                                 X:7, Rest/binary>>,
                                               N, Acc, F@_1, F@_2, F@_3, _,
                                               TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_SizedThroughputRequest(RestF,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              NewFValue,
                                              TrUserData).

skip_varint_SizedThroughputRequest(<<1:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                   TrUserData) ->
    skip_varint_SizedThroughputRequest(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       F@_3,
                                       F@_4,
                                       TrUserData);
skip_varint_SizedThroughputRequest(<<0:1, _:7,
                                     Rest/binary>>,
                                   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
                                   TrUserData) ->
    dfp_read_field_def_SizedThroughputRequest(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

skip_length_delimited_SizedThroughputRequest(<<1:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData)
    when N < 57 ->
    skip_length_delimited_SizedThroughputRequest(Rest,
                                                 N + 7,
                                                 X bsl N + Acc,
                                                 F@_1,
                                                 F@_2,
                                                 F@_3,
                                                 F@_4,
                                                 TrUserData);
skip_length_delimited_SizedThroughputRequest(<<0:1, X:7,
                                               Rest/binary>>,
                                             N, Acc, F@_1, F@_2, F@_3, F@_4,
                                             TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SizedThroughputRequest(Rest2,
                                              0,
                                              0,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

skip_group_SizedThroughputRequest(Bin, FNum, Z2, F@_1,
                                  F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SizedThroughputRequest(Rest,
                                              0,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

skip_32_SizedThroughputRequest(<<_:32, Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_SizedThroughputRequest(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

skip_64_SizedThroughputRequest(<<_:64, Rest/binary>>,
                               Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_SizedThroughputRequest(Rest,
                                              Z1,
                                              Z2,
                                              F@_1,
                                              F@_2,
                                              F@_3,
                                              F@_4,
                                              TrUserData).

decode_msg_TestResult(Bin, TrUserData) ->
    dfp_read_field_def_TestResult(Bin,
                                  0,
                                  0,
                                  id(undefined, TrUserData),
                                  TrUserData).

dfp_read_field_def_TestResult(<<10, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    d_field_TestResult_success(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               TrUserData);
dfp_read_field_def_TestResult(<<18, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    d_field_TestResult_failure(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               TrUserData);
dfp_read_field_def_TestResult(<<26, Rest/binary>>, Z1,
                              Z2, F@_1, TrUserData) ->
    d_field_TestResult_not_implemented(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData);
dfp_read_field_def_TestResult(<<>>, 0, 0, F@_1, _) ->
    #'TestResult'{sealed_value = F@_1};
dfp_read_field_def_TestResult(Other, Z1, Z2, F@_1,
                              TrUserData) ->
    dg_read_field_def_TestResult(Other,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData).

dg_read_field_def_TestResult(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TestResult(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 TrUserData);
dg_read_field_def_TestResult(<<0:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_TestResult_success(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData);
        18 ->
            d_field_TestResult_failure(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData);
        26 ->
            d_field_TestResult_not_implemented(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_TestResult(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_TestResult(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_TestResult(Rest,
                                                     0,
                                                     0,
                                                     F@_1,
                                                     TrUserData);
                3 ->
                    skip_group_TestResult(Rest,
                                          Key bsr 3,
                                          0,
                                          F@_1,
                                          TrUserData);
                5 -> skip_32_TestResult(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_TestResult(<<>>, 0, 0, F@_1, _) ->
    #'TestResult'{sealed_value = F@_1}.

d_field_TestResult_success(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_TestResult_success(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               TrUserData);
d_field_TestResult_success(<<0:1, X:7, Rest/binary>>, N,
                           Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_TestSuccess(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_TestResult(RestF,
                                  0,
                                  0,
                                  case Prev of
                                      undefined ->
                                          id({success, NewFValue}, TrUserData);
                                      {success, MVPrev} ->
                                          id({success,
                                              merge_msg_TestSuccess(MVPrev,
                                                                    NewFValue,
                                                                    TrUserData)},
                                             TrUserData);
                                      _ -> id({success, NewFValue}, TrUserData)
                                  end,
                                  TrUserData).

d_field_TestResult_failure(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_TestResult_failure(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               TrUserData);
d_field_TestResult_failure(<<0:1, X:7, Rest/binary>>, N,
                           Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_TestFailure(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_TestResult(RestF,
                                  0,
                                  0,
                                  case Prev of
                                      undefined ->
                                          id({failure, NewFValue}, TrUserData);
                                      {failure, MVPrev} ->
                                          id({failure,
                                              merge_msg_TestFailure(MVPrev,
                                                                    NewFValue,
                                                                    TrUserData)},
                                             TrUserData);
                                      _ -> id({failure, NewFValue}, TrUserData)
                                  end,
                                  TrUserData).

d_field_TestResult_not_implemented(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_TestResult_not_implemented(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       TrUserData);
d_field_TestResult_not_implemented(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_NotImplemented(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_TestResult(RestF,
                                  0,
                                  0,
                                  case Prev of
                                      undefined ->
                                          id({not_implemented, NewFValue},
                                             TrUserData);
                                      {not_implemented, MVPrev} ->
                                          id({not_implemented,
                                              merge_msg_NotImplemented(MVPrev,
                                                                       NewFValue,
                                                                       TrUserData)},
                                             TrUserData);
                                      _ ->
                                          id({not_implemented, NewFValue},
                                             TrUserData)
                                  end,
                                  TrUserData).

skip_varint_TestResult(<<1:1, _:7, Rest/binary>>, Z1,
                       Z2, F@_1, TrUserData) ->
    skip_varint_TestResult(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_TestResult(<<0:1, _:7, Rest/binary>>, Z1,
                       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_TestResult(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData).

skip_length_delimited_TestResult(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_TestResult(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     TrUserData);
skip_length_delimited_TestResult(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TestResult(Rest2,
                                  0,
                                  0,
                                  F@_1,
                                  TrUserData).

skip_group_TestResult(Bin, FNum, Z2, F@_1,
                      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TestResult(Rest,
                                  0,
                                  Z2,
                                  F@_1,
                                  TrUserData).

skip_32_TestResult(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                   TrUserData) ->
    dfp_read_field_def_TestResult(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData).

skip_64_TestResult(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                   TrUserData) ->
    dfp_read_field_def_TestResult(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData).

decode_msg_TestSuccess(Bin, TrUserData) ->
    dfp_read_field_def_TestSuccess(Bin,
                                   0,
                                   0,
                                   id(0, TrUserData),
                                   id([], TrUserData),
                                   TrUserData).

dfp_read_field_def_TestSuccess(<<8, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, TrUserData) ->
    d_field_TestSuccess_number_of_runs(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
dfp_read_field_def_TestSuccess(<<18, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, TrUserData) ->
    d_pfield_TestSuccess_run_results(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
dfp_read_field_def_TestSuccess(<<17, Rest/binary>>, Z1,
                               Z2, F@_1, F@_2, TrUserData) ->
    d_field_TestSuccess_run_results(Rest,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    F@_2,
                                    TrUserData);
dfp_read_field_def_TestSuccess(<<>>, 0, 0, F@_1, R1,
                               TrUserData) ->
    #'TestSuccess'{number_of_runs = F@_1,
                   run_results = lists_reverse(R1, TrUserData)};
dfp_read_field_def_TestSuccess(Other, Z1, Z2, F@_1,
                               F@_2, TrUserData) ->
    dg_read_field_def_TestSuccess(Other,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  F@_2,
                                  TrUserData).

dg_read_field_def_TestSuccess(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TestSuccess(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
dg_read_field_def_TestSuccess(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_TestSuccess_number_of_runs(Rest,
                                               0,
                                               0,
                                               F@_1,
                                               F@_2,
                                               TrUserData);
        18 ->
            d_pfield_TestSuccess_run_results(Rest,
                                             0,
                                             0,
                                             F@_1,
                                             F@_2,
                                             TrUserData);
        17 ->
            d_field_TestSuccess_run_results(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_TestSuccess(Rest,
                                            0,
                                            0,
                                            F@_1,
                                            F@_2,
                                            TrUserData);
                1 ->
                    skip_64_TestSuccess(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_TestSuccess(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      F@_2,
                                                      TrUserData);
                3 ->
                    skip_group_TestSuccess(Rest,
                                           Key bsr 3,
                                           0,
                                           F@_1,
                                           F@_2,
                                           TrUserData);
                5 ->
                    skip_32_TestSuccess(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_TestSuccess(<<>>, 0, 0, F@_1, R1,
                              TrUserData) ->
    #'TestSuccess'{number_of_runs = F@_1,
                   run_results = lists_reverse(R1, TrUserData)}.

d_field_TestSuccess_number_of_runs(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_TestSuccess_number_of_runs(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
d_field_TestSuccess_number_of_runs(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
                          Rest},
    dfp_read_field_def_TestSuccess(RestF,
                                   0,
                                   0,
                                   NewFValue,
                                   F@_2,
                                   TrUserData).

d_field_TestSuccess_run_results(<<0:48, 240, 127,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, Prev, TrUserData) ->
    dfp_read_field_def_TestSuccess(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   cons(id(infinity, TrUserData),
                                        Prev,
                                        TrUserData),
                                   TrUserData);
d_field_TestSuccess_run_results(<<0:48, 240, 255,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, Prev, TrUserData) ->
    dfp_read_field_def_TestSuccess(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   cons(id('-infinity', TrUserData),
                                        Prev,
                                        TrUserData),
                                   TrUserData);
d_field_TestSuccess_run_results(<<_:48, 15:4, _:4, _:1,
                                  127:7, Rest/binary>>,
                                Z1, Z2, F@_1, Prev, TrUserData) ->
    dfp_read_field_def_TestSuccess(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   cons(id(nan, TrUserData), Prev, TrUserData),
                                   TrUserData);
d_field_TestSuccess_run_results(<<Value:64/little-float,
                                  Rest/binary>>,
                                Z1, Z2, F@_1, Prev, TrUserData) ->
    dfp_read_field_def_TestSuccess(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   cons(id(Value, TrUserData),
                                        Prev,
                                        TrUserData),
                                   TrUserData).

d_pfield_TestSuccess_run_results(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_TestSuccess_run_results(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     F@_1,
                                     F@_2,
                                     TrUserData);
d_pfield_TestSuccess_run_results(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, F@_1, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
        d_packed_field_TestSuccess_run_results(PackedBytes,
                                               0,
                                               0,
                                               E,
                                               TrUserData),
    dfp_read_field_def_TestSuccess(Rest2,
                                   0,
                                   0,
                                   F@_1,
                                   NewSeq,
                                   TrUserData).

d_packed_field_TestSuccess_run_results(<<0:48, 240, 127,
                                         Rest/binary>>,
                                       Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_TestSuccess_run_results(Rest,
                                           Z1,
                                           Z2,
                                           cons(id(infinity, TrUserData),
                                                AccSeq,
                                                TrUserData),
                                           TrUserData);
d_packed_field_TestSuccess_run_results(<<0:48, 240, 255,
                                         Rest/binary>>,
                                       Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_TestSuccess_run_results(Rest,
                                           Z1,
                                           Z2,
                                           cons(id('-infinity', TrUserData),
                                                AccSeq,
                                                TrUserData),
                                           TrUserData);
d_packed_field_TestSuccess_run_results(<<_:48, 15:4,
                                         _:4, _:1, 127:7, Rest/binary>>,
                                       Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_TestSuccess_run_results(Rest,
                                           Z1,
                                           Z2,
                                           cons(id(nan, TrUserData),
                                                AccSeq,
                                                TrUserData),
                                           TrUserData);
d_packed_field_TestSuccess_run_results(<<Value:64/little-float,
                                         Rest/binary>>,
                                       Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_TestSuccess_run_results(Rest,
                                           Z1,
                                           Z2,
                                           cons(id(Value, TrUserData),
                                                AccSeq,
                                                TrUserData),
                                           TrUserData);
d_packed_field_TestSuccess_run_results(<<>>, _, _,
                                       AccSeq, _) ->
    AccSeq.

skip_varint_TestSuccess(<<1:1, _:7, Rest/binary>>, Z1,
                        Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_TestSuccess(Rest,
                            Z1,
                            Z2,
                            F@_1,
                            F@_2,
                            TrUserData);
skip_varint_TestSuccess(<<0:1, _:7, Rest/binary>>, Z1,
                        Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_TestSuccess(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData).

skip_length_delimited_TestSuccess(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_TestSuccess(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      F@_2,
                                      TrUserData);
skip_length_delimited_TestSuccess(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TestSuccess(Rest2,
                                   0,
                                   0,
                                   F@_1,
                                   F@_2,
                                   TrUserData).

skip_group_TestSuccess(Bin, FNum, Z2, F@_1, F@_2,
                       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TestSuccess(Rest,
                                   0,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData).

skip_32_TestSuccess(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                    F@_2, TrUserData) ->
    dfp_read_field_def_TestSuccess(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData).

skip_64_TestSuccess(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                    F@_2, TrUserData) ->
    dfp_read_field_def_TestSuccess(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   F@_2,
                                   TrUserData).

decode_msg_TestFailure(Bin, TrUserData) ->
    dfp_read_field_def_TestFailure(Bin,
                                   0,
                                   0,
                                   id([], TrUserData),
                                   TrUserData).

dfp_read_field_def_TestFailure(<<10, Rest/binary>>, Z1,
                               Z2, F@_1, TrUserData) ->
    d_field_TestFailure_reason(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               TrUserData);
dfp_read_field_def_TestFailure(<<>>, 0, 0, F@_1, _) ->
    #'TestFailure'{reason = F@_1};
dfp_read_field_def_TestFailure(Other, Z1, Z2, F@_1,
                               TrUserData) ->
    dg_read_field_def_TestFailure(Other,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData).

dg_read_field_def_TestFailure(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_TestFailure(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  TrUserData);
dg_read_field_def_TestFailure(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 ->
            d_field_TestFailure_reason(Rest,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_TestFailure(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_TestFailure(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_TestFailure(Rest,
                                                      0,
                                                      0,
                                                      F@_1,
                                                      TrUserData);
                3 ->
                    skip_group_TestFailure(Rest,
                                           Key bsr 3,
                                           0,
                                           F@_1,
                                           TrUserData);
                5 -> skip_32_TestFailure(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_TestFailure(<<>>, 0, 0, F@_1, _) ->
    #'TestFailure'{reason = F@_1}.

d_field_TestFailure_reason(<<1:1, X:7, Rest/binary>>, N,
                           Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_TestFailure_reason(Rest,
                               N + 7,
                               X bsl N + Acc,
                               F@_1,
                               TrUserData);
d_field_TestFailure_reason(<<0:1, X:7, Rest/binary>>, N,
                           Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Utf8:Len/binary, Rest2/binary>> = Rest,
                             {id(unicode:characters_to_list(Utf8, unicode),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_TestFailure(RestF,
                                   0,
                                   0,
                                   NewFValue,
                                   TrUserData).

skip_varint_TestFailure(<<1:1, _:7, Rest/binary>>, Z1,
                        Z2, F@_1, TrUserData) ->
    skip_varint_TestFailure(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_TestFailure(<<0:1, _:7, Rest/binary>>, Z1,
                        Z2, F@_1, TrUserData) ->
    dfp_read_field_def_TestFailure(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   TrUserData).

skip_length_delimited_TestFailure(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_TestFailure(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      TrUserData);
skip_length_delimited_TestFailure(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TestFailure(Rest2,
                                   0,
                                   0,
                                   F@_1,
                                   TrUserData).

skip_group_TestFailure(Bin, FNum, Z2, F@_1,
                       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TestFailure(Rest,
                                   0,
                                   Z2,
                                   F@_1,
                                   TrUserData).

skip_32_TestFailure(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                    TrUserData) ->
    dfp_read_field_def_TestFailure(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   TrUserData).

skip_64_TestFailure(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                    TrUserData) ->
    dfp_read_field_def_TestFailure(Rest,
                                   Z1,
                                   Z2,
                                   F@_1,
                                   TrUserData).

decode_msg_NotImplemented(Bin, TrUserData) ->
    dfp_read_field_def_NotImplemented(Bin,
                                      0,
                                      0,
                                      TrUserData).

dfp_read_field_def_NotImplemented(<<>>, 0, 0, _) ->
    #'NotImplemented'{};
dfp_read_field_def_NotImplemented(Other, Z1, Z2,
                                  TrUserData) ->
    dg_read_field_def_NotImplemented(Other,
                                     Z1,
                                     Z2,
                                     TrUserData).

dg_read_field_def_NotImplemented(<<1:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NotImplemented(Rest,
                                     N + 7,
                                     X bsl N + Acc,
                                     TrUserData);
dg_read_field_def_NotImplemented(<<0:1, X:7,
                                   Rest/binary>>,
                                 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_NotImplemented(Rest, 0, 0, TrUserData);
        1 -> skip_64_NotImplemented(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_NotImplemented(Rest,
                                                 0,
                                                 0,
                                                 TrUserData);
        3 ->
            skip_group_NotImplemented(Rest,
                                      Key bsr 3,
                                      0,
                                      TrUserData);
        5 -> skip_32_NotImplemented(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_NotImplemented(<<>>, 0, 0, _) ->
    #'NotImplemented'{}.

skip_varint_NotImplemented(<<1:1, _:7, Rest/binary>>,
                           Z1, Z2, TrUserData) ->
    skip_varint_NotImplemented(Rest, Z1, Z2, TrUserData);
skip_varint_NotImplemented(<<0:1, _:7, Rest/binary>>,
                           Z1, Z2, TrUserData) ->
    dfp_read_field_def_NotImplemented(Rest,
                                      Z1,
                                      Z2,
                                      TrUserData).

skip_length_delimited_NotImplemented(<<1:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_NotImplemented(Rest,
                                         N + 7,
                                         X bsl N + Acc,
                                         TrUserData);
skip_length_delimited_NotImplemented(<<0:1, X:7,
                                       Rest/binary>>,
                                     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotImplemented(Rest2,
                                      0,
                                      0,
                                      TrUserData).

skip_group_NotImplemented(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotImplemented(Rest,
                                      0,
                                      Z2,
                                      TrUserData).

skip_32_NotImplemented(<<_:32, Rest/binary>>, Z1, Z2,
                       TrUserData) ->
    dfp_read_field_def_NotImplemented(Rest,
                                      Z1,
                                      Z2,
                                      TrUserData).

skip_64_NotImplemented(<<_:64, Rest/binary>>, Z1, Z2,
                       TrUserData) ->
    dfp_read_field_def_NotImplemented(Rest,
                                      Z1,
                                      Z2,
                                      TrUserData).

decode_msg_ReadyRequest(Bin, TrUserData) ->
    dfp_read_field_def_ReadyRequest(Bin, 0, 0, TrUserData).

dfp_read_field_def_ReadyRequest(<<>>, 0, 0, _) ->
    #'ReadyRequest'{};
dfp_read_field_def_ReadyRequest(Other, Z1, Z2,
                                TrUserData) ->
    dg_read_field_def_ReadyRequest(Other,
                                   Z1,
                                   Z2,
                                   TrUserData).

dg_read_field_def_ReadyRequest(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReadyRequest(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   TrUserData);
dg_read_field_def_ReadyRequest(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_ReadyRequest(Rest, 0, 0, TrUserData);
        1 -> skip_64_ReadyRequest(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_ReadyRequest(Rest,
                                               0,
                                               0,
                                               TrUserData);
        3 ->
            skip_group_ReadyRequest(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_ReadyRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ReadyRequest(<<>>, 0, 0, _) ->
    #'ReadyRequest'{}.

skip_varint_ReadyRequest(<<1:1, _:7, Rest/binary>>, Z1,
                         Z2, TrUserData) ->
    skip_varint_ReadyRequest(Rest, Z1, Z2, TrUserData);
skip_varint_ReadyRequest(<<0:1, _:7, Rest/binary>>, Z1,
                         Z2, TrUserData) ->
    dfp_read_field_def_ReadyRequest(Rest,
                                    Z1,
                                    Z2,
                                    TrUserData).

skip_length_delimited_ReadyRequest(<<1:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReadyRequest(Rest,
                                       N + 7,
                                       X bsl N + Acc,
                                       TrUserData);
skip_length_delimited_ReadyRequest(<<0:1, X:7,
                                     Rest/binary>>,
                                   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadyRequest(Rest2,
                                    0,
                                    0,
                                    TrUserData).

skip_group_ReadyRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadyRequest(Rest,
                                    0,
                                    Z2,
                                    TrUserData).

skip_32_ReadyRequest(<<_:32, Rest/binary>>, Z1, Z2,
                     TrUserData) ->
    dfp_read_field_def_ReadyRequest(Rest,
                                    Z1,
                                    Z2,
                                    TrUserData).

skip_64_ReadyRequest(<<_:64, Rest/binary>>, Z1, Z2,
                     TrUserData) ->
    dfp_read_field_def_ReadyRequest(Rest,
                                    Z1,
                                    Z2,
                                    TrUserData).

decode_msg_ReadyResponse(Bin, TrUserData) ->
    dfp_read_field_def_ReadyResponse(Bin,
                                     0,
                                     0,
                                     id(false, TrUserData),
                                     TrUserData).

dfp_read_field_def_ReadyResponse(<<8, Rest/binary>>, Z1,
                                 Z2, F@_1, TrUserData) ->
    d_field_ReadyResponse_status(Rest,
                                 Z1,
                                 Z2,
                                 F@_1,
                                 TrUserData);
dfp_read_field_def_ReadyResponse(<<>>, 0, 0, F@_1, _) ->
    #'ReadyResponse'{status = F@_1};
dfp_read_field_def_ReadyResponse(Other, Z1, Z2, F@_1,
                                 TrUserData) ->
    dg_read_field_def_ReadyResponse(Other,
                                    Z1,
                                    Z2,
                                    F@_1,
                                    TrUserData).

dg_read_field_def_ReadyResponse(<<1:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ReadyResponse(Rest,
                                    N + 7,
                                    X bsl N + Acc,
                                    F@_1,
                                    TrUserData);
dg_read_field_def_ReadyResponse(<<0:1, X:7,
                                  Rest/binary>>,
                                N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_ReadyResponse_status(Rest,
                                         0,
                                         0,
                                         F@_1,
                                         TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_ReadyResponse(Rest, 0, 0, F@_1, TrUserData);
                1 ->
                    skip_64_ReadyResponse(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_ReadyResponse(Rest,
                                                        0,
                                                        0,
                                                        F@_1,
                                                        TrUserData);
                3 ->
                    skip_group_ReadyResponse(Rest,
                                             Key bsr 3,
                                             0,
                                             F@_1,
                                             TrUserData);
                5 -> skip_32_ReadyResponse(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ReadyResponse(<<>>, 0, 0, F@_1, _) ->
    #'ReadyResponse'{status = F@_1}.

d_field_ReadyResponse_status(<<1:1, X:7, Rest/binary>>,
                             N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ReadyResponse_status(Rest,
                                 N + 7,
                                 X bsl N + Acc,
                                 F@_1,
                                 TrUserData);
d_field_ReadyResponse_status(<<0:1, X:7, Rest/binary>>,
                             N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_ReadyResponse(RestF,
                                     0,
                                     0,
                                     NewFValue,
                                     TrUserData).

skip_varint_ReadyResponse(<<1:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, TrUserData) ->
    skip_varint_ReadyResponse(Rest,
                              Z1,
                              Z2,
                              F@_1,
                              TrUserData);
skip_varint_ReadyResponse(<<0:1, _:7, Rest/binary>>, Z1,
                          Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ReadyResponse(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_length_delimited_ReadyResponse(<<1:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ReadyResponse(Rest,
                                        N + 7,
                                        X bsl N + Acc,
                                        F@_1,
                                        TrUserData);
skip_length_delimited_ReadyResponse(<<0:1, X:7,
                                      Rest/binary>>,
                                    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadyResponse(Rest2,
                                     0,
                                     0,
                                     F@_1,
                                     TrUserData).

skip_group_ReadyResponse(Bin, FNum, Z2, F@_1,
                         TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadyResponse(Rest,
                                     0,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_32_ReadyResponse(<<_:32, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_ReadyResponse(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

skip_64_ReadyResponse(<<_:64, Rest/binary>>, Z1, Z2,
                      F@_1, TrUserData) ->
    dfp_read_field_def_ReadyResponse(Rest,
                                     Z1,
                                     Z2,
                                     F@_1,
                                     TrUserData).

decode_msg_ShutdownRequest(Bin, TrUserData) ->
    dfp_read_field_def_ShutdownRequest(Bin,
                                       0,
                                       0,
                                       id(false, TrUserData),
                                       TrUserData).

dfp_read_field_def_ShutdownRequest(<<8, Rest/binary>>,
                                   Z1, Z2, F@_1, TrUserData) ->
    d_field_ShutdownRequest_force(Rest,
                                  Z1,
                                  Z2,
                                  F@_1,
                                  TrUserData);
dfp_read_field_def_ShutdownRequest(<<>>, 0, 0, F@_1,
                                   _) ->
    #'ShutdownRequest'{force = F@_1};
dfp_read_field_def_ShutdownRequest(Other, Z1, Z2, F@_1,
                                   TrUserData) ->
    dg_read_field_def_ShutdownRequest(Other,
                                      Z1,
                                      Z2,
                                      F@_1,
                                      TrUserData).

dg_read_field_def_ShutdownRequest(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ShutdownRequest(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      F@_1,
                                      TrUserData);
dg_read_field_def_ShutdownRequest(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 ->
            d_field_ShutdownRequest_force(Rest,
                                          0,
                                          0,
                                          F@_1,
                                          TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_ShutdownRequest(Rest,
                                                0,
                                                0,
                                                F@_1,
                                                TrUserData);
                1 ->
                    skip_64_ShutdownRequest(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_ShutdownRequest(Rest,
                                                          0,
                                                          0,
                                                          F@_1,
                                                          TrUserData);
                3 ->
                    skip_group_ShutdownRequest(Rest,
                                               Key bsr 3,
                                               0,
                                               F@_1,
                                               TrUserData);
                5 ->
                    skip_32_ShutdownRequest(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ShutdownRequest(<<>>, 0, 0, F@_1,
                                  _) ->
    #'ShutdownRequest'{force = F@_1}.

d_field_ShutdownRequest_force(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_ShutdownRequest_force(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  TrUserData);
d_field_ShutdownRequest_force(<<0:1, X:7, Rest/binary>>,
                              N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
                             TrUserData),
                          Rest},
    dfp_read_field_def_ShutdownRequest(RestF,
                                       0,
                                       0,
                                       NewFValue,
                                       TrUserData).

skip_varint_ShutdownRequest(<<1:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, TrUserData) ->
    skip_varint_ShutdownRequest(Rest,
                                Z1,
                                Z2,
                                F@_1,
                                TrUserData);
skip_varint_ShutdownRequest(<<0:1, _:7, Rest/binary>>,
                            Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_ShutdownRequest(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_length_delimited_ShutdownRequest(<<1:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_ShutdownRequest(Rest,
                                          N + 7,
                                          X bsl N + Acc,
                                          F@_1,
                                          TrUserData);
skip_length_delimited_ShutdownRequest(<<0:1, X:7,
                                        Rest/binary>>,
                                      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ShutdownRequest(Rest2,
                                       0,
                                       0,
                                       F@_1,
                                       TrUserData).

skip_group_ShutdownRequest(Bin, FNum, Z2, F@_1,
                           TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ShutdownRequest(Rest,
                                       0,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_32_ShutdownRequest(<<_:32, Rest/binary>>, Z1, Z2,
                        F@_1, TrUserData) ->
    dfp_read_field_def_ShutdownRequest(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

skip_64_ShutdownRequest(<<_:64, Rest/binary>>, Z1, Z2,
                        F@_1, TrUserData) ->
    dfp_read_field_def_ShutdownRequest(Rest,
                                       Z1,
                                       Z2,
                                       F@_1,
                                       TrUserData).

decode_msg_ShutdownAck(Bin, TrUserData) ->
    dfp_read_field_def_ShutdownAck(Bin, 0, 0, TrUserData).

dfp_read_field_def_ShutdownAck(<<>>, 0, 0, _) ->
    #'ShutdownAck'{};
dfp_read_field_def_ShutdownAck(Other, Z1, Z2,
                               TrUserData) ->
    dg_read_field_def_ShutdownAck(Other,
                                  Z1,
                                  Z2,
                                  TrUserData).

dg_read_field_def_ShutdownAck(<<1:1, X:7, Rest/binary>>,
                              N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ShutdownAck(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  TrUserData);
dg_read_field_def_ShutdownAck(<<0:1, X:7, Rest/binary>>,
                              N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_ShutdownAck(Rest, 0, 0, TrUserData);
        1 -> skip_64_ShutdownAck(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_ShutdownAck(Rest,
                                              0,
                                              0,
                                              TrUserData);
        3 ->
            skip_group_ShutdownAck(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_ShutdownAck(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_ShutdownAck(<<>>, 0, 0, _) ->
    #'ShutdownAck'{}.

skip_varint_ShutdownAck(<<1:1, _:7, Rest/binary>>, Z1,
                        Z2, TrUserData) ->
    skip_varint_ShutdownAck(Rest, Z1, Z2, TrUserData);
skip_varint_ShutdownAck(<<0:1, _:7, Rest/binary>>, Z1,
                        Z2, TrUserData) ->
    dfp_read_field_def_ShutdownAck(Rest,
                                   Z1,
                                   Z2,
                                   TrUserData).

skip_length_delimited_ShutdownAck(<<1:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_ShutdownAck(Rest,
                                      N + 7,
                                      X bsl N + Acc,
                                      TrUserData);
skip_length_delimited_ShutdownAck(<<0:1, X:7,
                                    Rest/binary>>,
                                  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ShutdownAck(Rest2, 0, 0, TrUserData).

skip_group_ShutdownAck(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ShutdownAck(Rest, 0, Z2, TrUserData).

skip_32_ShutdownAck(<<_:32, Rest/binary>>, Z1, Z2,
                    TrUserData) ->
    dfp_read_field_def_ShutdownAck(Rest,
                                   Z1,
                                   Z2,
                                   TrUserData).

skip_64_ShutdownAck(<<_:64, Rest/binary>>, Z1, Z2,
                    TrUserData) ->
    dfp_read_field_def_ShutdownAck(Rest,
                                   Z1,
                                   Z2,
                                   TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
         is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'PingPongRequest' ->
            merge_msg_PingPongRequest(Prev, New, TrUserData);
        'ThroughputPingPongRequest' ->
            merge_msg_ThroughputPingPongRequest(Prev,
                                                New,
                                                TrUserData);
        'AtomicRegisterRequest' ->
            merge_msg_AtomicRegisterRequest(Prev, New, TrUserData);
        'SizedThroughputRequest' ->
            merge_msg_SizedThroughputRequest(Prev, New, TrUserData);
        'TestResult' ->
            merge_msg_TestResult(Prev, New, TrUserData);
        'TestSuccess' ->
            merge_msg_TestSuccess(Prev, New, TrUserData);
        'TestFailure' ->
            merge_msg_TestFailure(Prev, New, TrUserData);
        'NotImplemented' ->
            merge_msg_NotImplemented(Prev, New, TrUserData);
        'ReadyRequest' ->
            merge_msg_ReadyRequest(Prev, New, TrUserData);
        'ReadyResponse' ->
            merge_msg_ReadyResponse(Prev, New, TrUserData);
        'ShutdownRequest' ->
            merge_msg_ShutdownRequest(Prev, New, TrUserData);
        'ShutdownAck' ->
            merge_msg_ShutdownAck(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_PingPongRequest/3}).
merge_msg_PingPongRequest(#'PingPongRequest'{number_of_messages
                                                 = PFnumber_of_messages},
                          #'PingPongRequest'{number_of_messages =
                                                 NFnumber_of_messages},
                          _) ->
    #'PingPongRequest'{number_of_messages =
                           if NFnumber_of_messages =:= undefined ->
                                  PFnumber_of_messages;
                              true -> NFnumber_of_messages
                           end}.

-compile({nowarn_unused_function,merge_msg_ThroughputPingPongRequest/3}).
merge_msg_ThroughputPingPongRequest(#'ThroughputPingPongRequest'{messages_per_pair
                                                                     =
                                                                     PFmessages_per_pair,
                                                                 pipeline_size =
                                                                     PFpipeline_size,
                                                                 parallelism =
                                                                     PFparallelism,
                                                                 static_only =
                                                                     PFstatic_only},
                                    #'ThroughputPingPongRequest'{messages_per_pair
                                                                     =
                                                                     NFmessages_per_pair,
                                                                 pipeline_size =
                                                                     NFpipeline_size,
                                                                 parallelism =
                                                                     NFparallelism,
                                                                 static_only =
                                                                     NFstatic_only},
                                    _) ->
    #'ThroughputPingPongRequest'{messages_per_pair =
                                     if NFmessages_per_pair =:= undefined ->
                                            PFmessages_per_pair;
                                        true -> NFmessages_per_pair
                                     end,
                                 pipeline_size =
                                     if NFpipeline_size =:= undefined ->
                                            PFpipeline_size;
                                        true -> NFpipeline_size
                                     end,
                                 parallelism =
                                     if NFparallelism =:= undefined ->
                                            PFparallelism;
                                        true -> NFparallelism
                                     end,
                                 static_only =
                                     if NFstatic_only =:= undefined ->
                                            PFstatic_only;
                                        true -> NFstatic_only
                                     end}.

-compile({nowarn_unused_function,merge_msg_AtomicRegisterRequest/3}).
merge_msg_AtomicRegisterRequest(#'AtomicRegisterRequest'{read_workload
                                                             = PFread_workload,
                                                         write_workload =
                                                             PFwrite_workload,
                                                         partition_size =
                                                             PFpartition_size,
                                                         number_of_keys =
                                                             PFnumber_of_keys},
                                #'AtomicRegisterRequest'{read_workload =
                                                             NFread_workload,
                                                         write_workload =
                                                             NFwrite_workload,
                                                         partition_size =
                                                             NFpartition_size,
                                                         number_of_keys =
                                                             NFnumber_of_keys},
                                _) ->
    #'AtomicRegisterRequest'{read_workload =
                                 if NFread_workload =:= undefined ->
                                        PFread_workload;
                                    true -> NFread_workload
                                 end,
                             write_workload =
                                 if NFwrite_workload =:= undefined ->
                                        PFwrite_workload;
                                    true -> NFwrite_workload
                                 end,
                             partition_size =
                                 if NFpartition_size =:= undefined ->
                                        PFpartition_size;
                                    true -> NFpartition_size
                                 end,
                             number_of_keys =
                                 if NFnumber_of_keys =:= undefined ->
                                        PFnumber_of_keys;
                                    true -> NFnumber_of_keys
                                 end}.

-compile({nowarn_unused_function,merge_msg_SizedThroughputRequest/3}).
merge_msg_SizedThroughputRequest(#'SizedThroughputRequest'{message_size
                                                               = PFmessage_size,
                                                           batch_size =
                                                               PFbatch_size,
                                                           number_of_batches =
                                                               PFnumber_of_batches,
                                                           number_of_pairs =
                                                               PFnumber_of_pairs},
                                 #'SizedThroughputRequest'{message_size =
                                                               NFmessage_size,
                                                           batch_size =
                                                               NFbatch_size,
                                                           number_of_batches =
                                                               NFnumber_of_batches,
                                                           number_of_pairs =
                                                               NFnumber_of_pairs},
                                 _) ->
    #'SizedThroughputRequest'{message_size =
                                  if NFmessage_size =:= undefined ->
                                         PFmessage_size;
                                     true -> NFmessage_size
                                  end,
                              batch_size =
                                  if NFbatch_size =:= undefined -> PFbatch_size;
                                     true -> NFbatch_size
                                  end,
                              number_of_batches =
                                  if NFnumber_of_batches =:= undefined ->
                                         PFnumber_of_batches;
                                     true -> NFnumber_of_batches
                                  end,
                              number_of_pairs =
                                  if NFnumber_of_pairs =:= undefined ->
                                         PFnumber_of_pairs;
                                     true -> NFnumber_of_pairs
                                  end}.

-compile({nowarn_unused_function,merge_msg_TestResult/3}).
merge_msg_TestResult(#'TestResult'{sealed_value =
                                       PFsealed_value},
                     #'TestResult'{sealed_value = NFsealed_value},
                     TrUserData) ->
    #'TestResult'{sealed_value =
                      case {PFsealed_value, NFsealed_value} of
                          {{success, OPFsealed_value},
                           {success, ONFsealed_value}} ->
                              {success,
                               merge_msg_TestSuccess(OPFsealed_value,
                                                     ONFsealed_value,
                                                     TrUserData)};
                          {{failure, OPFsealed_value},
                           {failure, ONFsealed_value}} ->
                              {failure,
                               merge_msg_TestFailure(OPFsealed_value,
                                                     ONFsealed_value,
                                                     TrUserData)};
                          {{not_implemented, OPFsealed_value},
                           {not_implemented, ONFsealed_value}} ->
                              {not_implemented,
                               merge_msg_NotImplemented(OPFsealed_value,
                                                        ONFsealed_value,
                                                        TrUserData)};
                          {_, undefined} -> PFsealed_value;
                          _ -> NFsealed_value
                      end}.

-compile({nowarn_unused_function,merge_msg_TestSuccess/3}).
merge_msg_TestSuccess(#'TestSuccess'{number_of_runs =
                                         PFnumber_of_runs,
                                     run_results = PFrun_results},
                      #'TestSuccess'{number_of_runs = NFnumber_of_runs,
                                     run_results = NFrun_results},
                      TrUserData) ->
    #'TestSuccess'{number_of_runs =
                       if NFnumber_of_runs =:= undefined -> PFnumber_of_runs;
                          true -> NFnumber_of_runs
                       end,
                   run_results =
                       if PFrun_results /= undefined,
                          NFrun_results /= undefined ->
                              'erlang_++'(PFrun_results,
                                          NFrun_results,
                                          TrUserData);
                          PFrun_results == undefined -> NFrun_results;
                          NFrun_results == undefined -> PFrun_results
                       end}.

-compile({nowarn_unused_function,merge_msg_TestFailure/3}).
merge_msg_TestFailure(#'TestFailure'{reason = PFreason},
                      #'TestFailure'{reason = NFreason}, _) ->
    #'TestFailure'{reason =
                       if NFreason =:= undefined -> PFreason;
                          true -> NFreason
                       end}.

-compile({nowarn_unused_function,merge_msg_NotImplemented/3}).
merge_msg_NotImplemented(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_ReadyRequest/3}).
merge_msg_ReadyRequest(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_ReadyResponse/3}).
merge_msg_ReadyResponse(#'ReadyResponse'{status =
                                             PFstatus},
                        #'ReadyResponse'{status = NFstatus}, _) ->
    #'ReadyResponse'{status =
                         if NFstatus =:= undefined -> PFstatus;
                            true -> NFstatus
                         end}.

-compile({nowarn_unused_function,merge_msg_ShutdownRequest/3}).
merge_msg_ShutdownRequest(#'ShutdownRequest'{force =
                                                 PFforce},
                          #'ShutdownRequest'{force = NFforce}, _) ->
    #'ShutdownRequest'{force =
                           if NFforce =:= undefined -> PFforce;
                              true -> NFforce
                           end}.

-compile({nowarn_unused_function,merge_msg_ShutdownAck/3}).
merge_msg_ShutdownAck(_Prev, New, _TrUserData) -> New.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'PingPongRequest' ->
            v_msg_PingPongRequest(Msg, [MsgName], TrUserData);
        'ThroughputPingPongRequest' ->
            v_msg_ThroughputPingPongRequest(Msg,
                                            [MsgName],
                                            TrUserData);
        'AtomicRegisterRequest' ->
            v_msg_AtomicRegisterRequest(Msg, [MsgName], TrUserData);
        'SizedThroughputRequest' ->
            v_msg_SizedThroughputRequest(Msg,
                                         [MsgName],
                                         TrUserData);
        'TestResult' ->
            v_msg_TestResult(Msg, [MsgName], TrUserData);
        'TestSuccess' ->
            v_msg_TestSuccess(Msg, [MsgName], TrUserData);
        'TestFailure' ->
            v_msg_TestFailure(Msg, [MsgName], TrUserData);
        'NotImplemented' ->
            v_msg_NotImplemented(Msg, [MsgName], TrUserData);
        'ReadyRequest' ->
            v_msg_ReadyRequest(Msg, [MsgName], TrUserData);
        'ReadyResponse' ->
            v_msg_ReadyResponse(Msg, [MsgName], TrUserData);
        'ShutdownRequest' ->
            v_msg_ShutdownRequest(Msg, [MsgName], TrUserData);
        'ShutdownAck' ->
            v_msg_ShutdownAck(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_PingPongRequest/3}).
-dialyzer({nowarn_function,v_msg_PingPongRequest/3}).
v_msg_PingPongRequest(#'PingPongRequest'{number_of_messages
                                             = F1},
                      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_uint64(F1,
                         [number_of_messages | Path],
                         TrUserData)
    end,
    ok;
v_msg_PingPongRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PingPongRequest'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_ThroughputPingPongRequest/3}).
-dialyzer({nowarn_function,v_msg_ThroughputPingPongRequest/3}).
v_msg_ThroughputPingPongRequest(#'ThroughputPingPongRequest'{messages_per_pair
                                                                 = F1,
                                                             pipeline_size = F2,
                                                             parallelism = F3,
                                                             static_only = F4},
                                Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_uint64(F1,
                         [messages_per_pair | Path],
                         TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint64(F2, [pipeline_size | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_type_uint32(F3, [parallelism | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           v_type_bool(F4, [static_only | Path], TrUserData)
    end,
    ok;
v_msg_ThroughputPingPongRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg,
                   'ThroughputPingPongRequest'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_AtomicRegisterRequest/3}).
-dialyzer({nowarn_function,v_msg_AtomicRegisterRequest/3}).
v_msg_AtomicRegisterRequest(#'AtomicRegisterRequest'{read_workload
                                                         = F1,
                                                     write_workload = F2,
                                                     partition_size = F3,
                                                     number_of_keys = F4},
                            Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_float(F1, [read_workload | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_float(F2, [write_workload | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_type_uint32(F3, [partition_size | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           v_type_uint64(F4, [number_of_keys | Path], TrUserData)
    end,
    ok;
v_msg_AtomicRegisterRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AtomicRegisterRequest'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_SizedThroughputRequest/3}).
-dialyzer({nowarn_function,v_msg_SizedThroughputRequest/3}).
v_msg_SizedThroughputRequest(#'SizedThroughputRequest'{message_size
                                                           = F1,
                                                       batch_size = F2,
                                                       number_of_batches = F3,
                                                       number_of_pairs = F4},
                             Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_uint32(F1, [message_size | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
           v_type_uint32(F2, [batch_size | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
           v_type_uint32(F3,
                         [number_of_batches | Path],
                         TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
           v_type_uint32(F4, [number_of_pairs | Path], TrUserData)
    end,
    ok;
v_msg_SizedThroughputRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'SizedThroughputRequest'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_TestResult/3}).
-dialyzer({nowarn_function,v_msg_TestResult/3}).
v_msg_TestResult(#'TestResult'{sealed_value = F1}, Path,
                 TrUserData) ->
    case F1 of
        undefined -> ok;
        {success, OF1} ->
            v_msg_TestSuccess(OF1,
                              [success, sealed_value | Path],
                              TrUserData);
        {failure, OF1} ->
            v_msg_TestFailure(OF1,
                              [failure, sealed_value | Path],
                              TrUserData);
        {not_implemented, OF1} ->
            v_msg_NotImplemented(OF1,
                                 [not_implemented, sealed_value | Path],
                                 TrUserData);
        _ ->
            mk_type_error(invalid_oneof, F1, [sealed_value | Path])
    end,
    ok;
v_msg_TestResult(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TestResult'}, X, Path).

-compile({nowarn_unused_function,v_msg_TestSuccess/3}).
-dialyzer({nowarn_function,v_msg_TestSuccess/3}).
v_msg_TestSuccess(#'TestSuccess'{number_of_runs = F1,
                                 run_results = F2},
                  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
           v_type_uint32(F1, [number_of_runs | Path], TrUserData)
    end,
    if is_list(F2) ->
           _ = [v_type_double(Elem,
                              [run_results | Path],
                              TrUserData)
                || Elem <- F2],
           ok;
       true ->
           mk_type_error({invalid_list_of, double},
                         F2,
                         [run_results | Path])
    end,
    ok;
v_msg_TestSuccess(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TestSuccess'}, X, Path).

-compile({nowarn_unused_function,v_msg_TestFailure/3}).
-dialyzer({nowarn_function,v_msg_TestFailure/3}).
v_msg_TestFailure(#'TestFailure'{reason = F1}, Path,
                  TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [reason | Path], TrUserData)
    end,
    ok;
v_msg_TestFailure(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'TestFailure'}, X, Path).

-compile({nowarn_unused_function,v_msg_NotImplemented/3}).
-dialyzer({nowarn_function,v_msg_NotImplemented/3}).
v_msg_NotImplemented(#'NotImplemented'{}, _Path, _) ->
    ok;
v_msg_NotImplemented(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'NotImplemented'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_ReadyRequest/3}).
-dialyzer({nowarn_function,v_msg_ReadyRequest/3}).
v_msg_ReadyRequest(#'ReadyRequest'{}, _Path, _) -> ok;
v_msg_ReadyRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReadyRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_ReadyResponse/3}).
-dialyzer({nowarn_function,v_msg_ReadyResponse/3}).
v_msg_ReadyResponse(#'ReadyResponse'{status = F1}, Path,
                    TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [status | Path], TrUserData)
    end,
    ok;
v_msg_ReadyResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ReadyResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_ShutdownRequest/3}).
-dialyzer({nowarn_function,v_msg_ShutdownRequest/3}).
v_msg_ShutdownRequest(#'ShutdownRequest'{force = F1},
                      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [force | Path], TrUserData)
    end,
    ok;
v_msg_ShutdownRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ShutdownRequest'},
                  X,
                  Path).

-compile({nowarn_unused_function,v_msg_ShutdownAck/3}).
-dialyzer({nowarn_function,v_msg_ShutdownAck/3}).
v_msg_ShutdownAck(#'ShutdownAck'{}, _Path, _) -> ok;
v_msg_ShutdownAck(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ShutdownAck'}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range,
                   uint32,
                   unsigned,
                   32},
                  N,
                  Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range,
                   uint64,
                   unsigned,
                   64},
                  N,
                  Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64},
                  X,
                  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} ->
            mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg ->
            mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
                                         lists:map(fun atom_to_list/1,
                                                   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, 'PingPongRequest'},
      [#field{name = number_of_messages, fnum = 1, rnum = 2,
              type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'ThroughputPingPongRequest'},
      [#field{name = messages_per_pair, fnum = 1, rnum = 2,
              type = uint64, occurrence = optional, opts = []},
       #field{name = pipeline_size, fnum = 2, rnum = 3,
              type = uint64, occurrence = optional, opts = []},
       #field{name = parallelism, fnum = 3, rnum = 4,
              type = uint32, occurrence = optional, opts = []},
       #field{name = static_only, fnum = 4, rnum = 5,
              type = bool, occurrence = optional, opts = []}]},
     {{msg, 'AtomicRegisterRequest'},
      [#field{name = read_workload, fnum = 1, rnum = 2,
              type = float, occurrence = optional, opts = []},
       #field{name = write_workload, fnum = 2, rnum = 3,
              type = float, occurrence = optional, opts = []},
       #field{name = partition_size, fnum = 3, rnum = 4,
              type = uint32, occurrence = optional, opts = []},
       #field{name = number_of_keys, fnum = 4, rnum = 5,
              type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'SizedThroughputRequest'},
      [#field{name = message_size, fnum = 1, rnum = 2,
              type = uint32, occurrence = optional, opts = []},
       #field{name = batch_size, fnum = 2, rnum = 3,
              type = uint32, occurrence = optional, opts = []},
       #field{name = number_of_batches, fnum = 3, rnum = 4,
              type = uint32, occurrence = optional, opts = []},
       #field{name = number_of_pairs, fnum = 4, rnum = 5,
              type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'TestResult'},
      [#gpb_oneof{name = sealed_value, rnum = 2,
                  fields =
                      [#field{name = success, fnum = 1, rnum = 2,
                              type = {msg, 'TestSuccess'},
                              occurrence = optional, opts = []},
                       #field{name = failure, fnum = 2, rnum = 2,
                              type = {msg, 'TestFailure'},
                              occurrence = optional, opts = []},
                       #field{name = not_implemented, fnum = 3, rnum = 2,
                              type = {msg, 'NotImplemented'},
                              occurrence = optional, opts = []}]}]},
     {{msg, 'TestSuccess'},
      [#field{name = number_of_runs, fnum = 1, rnum = 2,
              type = uint32, occurrence = optional, opts = []},
       #field{name = run_results, fnum = 2, rnum = 3,
              type = double, occurrence = repeated,
              opts = [packed]}]},
     {{msg, 'TestFailure'},
      [#field{name = reason, fnum = 1, rnum = 2,
              type = string, occurrence = optional, opts = []}]},
     {{msg, 'NotImplemented'}, []},
     {{msg, 'ReadyRequest'}, []},
     {{msg, 'ReadyResponse'},
      [#field{name = status, fnum = 1, rnum = 2, type = bool,
              occurrence = optional, opts = []}]},
     {{msg, 'ShutdownRequest'},
      [#field{name = force, fnum = 1, rnum = 2, type = bool,
              occurrence = optional, opts = []}]},
     {{msg, 'ShutdownAck'}, []}].


get_msg_names() ->
    ['PingPongRequest',
     'ThroughputPingPongRequest',
     'AtomicRegisterRequest',
     'SizedThroughputRequest',
     'TestResult',
     'TestSuccess',
     'TestFailure',
     'NotImplemented',
     'ReadyRequest',
     'ReadyResponse',
     'ShutdownRequest',
     'ShutdownAck'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['PingPongRequest',
     'ThroughputPingPongRequest',
     'AtomicRegisterRequest',
     'SizedThroughputRequest',
     'TestResult',
     'TestSuccess',
     'TestFailure',
     'NotImplemented',
     'ReadyRequest',
     'ReadyResponse',
     'ShutdownRequest',
     'ShutdownAck'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('PingPongRequest') ->
    [#field{name = number_of_messages, fnum = 1, rnum = 2,
            type = uint64, occurrence = optional, opts = []}];
find_msg_def('ThroughputPingPongRequest') ->
    [#field{name = messages_per_pair, fnum = 1, rnum = 2,
            type = uint64, occurrence = optional, opts = []},
     #field{name = pipeline_size, fnum = 2, rnum = 3,
            type = uint64, occurrence = optional, opts = []},
     #field{name = parallelism, fnum = 3, rnum = 4,
            type = uint32, occurrence = optional, opts = []},
     #field{name = static_only, fnum = 4, rnum = 5,
            type = bool, occurrence = optional, opts = []}];
find_msg_def('AtomicRegisterRequest') ->
    [#field{name = read_workload, fnum = 1, rnum = 2,
            type = float, occurrence = optional, opts = []},
     #field{name = write_workload, fnum = 2, rnum = 3,
            type = float, occurrence = optional, opts = []},
     #field{name = partition_size, fnum = 3, rnum = 4,
            type = uint32, occurrence = optional, opts = []},
     #field{name = number_of_keys, fnum = 4, rnum = 5,
            type = uint64, occurrence = optional, opts = []}];
find_msg_def('SizedThroughputRequest') ->
    [#field{name = message_size, fnum = 1, rnum = 2,
            type = uint32, occurrence = optional, opts = []},
     #field{name = batch_size, fnum = 2, rnum = 3,
            type = uint32, occurrence = optional, opts = []},
     #field{name = number_of_batches, fnum = 3, rnum = 4,
            type = uint32, occurrence = optional, opts = []},
     #field{name = number_of_pairs, fnum = 4, rnum = 5,
            type = uint32, occurrence = optional, opts = []}];
find_msg_def('TestResult') ->
    [#gpb_oneof{name = sealed_value, rnum = 2,
                fields =
                    [#field{name = success, fnum = 1, rnum = 2,
                            type = {msg, 'TestSuccess'}, occurrence = optional,
                            opts = []},
                     #field{name = failure, fnum = 2, rnum = 2,
                            type = {msg, 'TestFailure'}, occurrence = optional,
                            opts = []},
                     #field{name = not_implemented, fnum = 3, rnum = 2,
                            type = {msg, 'NotImplemented'},
                            occurrence = optional, opts = []}]}];
find_msg_def('TestSuccess') ->
    [#field{name = number_of_runs, fnum = 1, rnum = 2,
            type = uint32, occurrence = optional, opts = []},
     #field{name = run_results, fnum = 2, rnum = 3,
            type = double, occurrence = repeated, opts = [packed]}];
find_msg_def('TestFailure') ->
    [#field{name = reason, fnum = 1, rnum = 2,
            type = string, occurrence = optional, opts = []}];
find_msg_def('NotImplemented') -> [];
find_msg_def('ReadyRequest') -> [];
find_msg_def('ReadyResponse') ->
    [#field{name = status, fnum = 1, rnum = 2, type = bool,
            occurrence = optional, opts = []}];
find_msg_def('ShutdownRequest') ->
    [#field{name = force, fnum = 1, rnum = 2, type = bool,
            occurrence = optional, opts = []}];
find_msg_def('ShutdownAck') -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['BenchmarkRunner'].


get_service_def('BenchmarkRunner') ->
    {{service, 'BenchmarkRunner'},
     [#rpc{name = 'Ready', input = 'ReadyRequest',
           output = 'ReadyResponse', input_stream = false,
           output_stream = false, opts = []},
      #rpc{name = 'Shutdown', input = 'ShutdownRequest',
           output = 'ShutdownAck', input_stream = false,
           output_stream = false, opts = []},
      #rpc{name = 'PingPong', input = 'PingPongRequest',
           output = 'TestResult', input_stream = false,
           output_stream = false, opts = []},
      #rpc{name = 'NetPingPong', input = 'PingPongRequest',
           output = 'TestResult', input_stream = false,
           output_stream = false, opts = []},
      #rpc{name = 'ThroughputPingPong',
           input = 'ThroughputPingPongRequest',
           output = 'TestResult', input_stream = false,
           output_stream = false, opts = []},
      #rpc{name = 'NetThroughputPingPong',
           input = 'ThroughputPingPongRequest',
           output = 'TestResult', input_stream = false,
           output_stream = false, opts = []},
      #rpc{name = 'AtomicRegister',
           input = 'AtomicRegisterRequest', output = 'TestResult',
           input_stream = false, output_stream = false, opts = []},
      #rpc{name = 'SizedThroughput',
           input = 'SizedThroughputRequest', output = 'TestResult',
           input_stream = false, output_stream = false,
           opts = []}]};
get_service_def(_) -> error.


get_rpc_names('BenchmarkRunner') ->
    ['Ready',
     'Shutdown',
     'PingPong',
     'NetPingPong',
     'ThroughputPingPong',
     'NetThroughputPingPong',
     'AtomicRegister',
     'SizedThroughput'];
get_rpc_names(_) -> error.


find_rpc_def('BenchmarkRunner', RpcName) ->
    find_rpc_def_BenchmarkRunner(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_BenchmarkRunner('Ready') ->
    #rpc{name = 'Ready', input = 'ReadyRequest',
         output = 'ReadyResponse', input_stream = false,
         output_stream = false, opts = []};
find_rpc_def_BenchmarkRunner('Shutdown') ->
    #rpc{name = 'Shutdown', input = 'ShutdownRequest',
         output = 'ShutdownAck', input_stream = false,
         output_stream = false, opts = []};
find_rpc_def_BenchmarkRunner('PingPong') ->
    #rpc{name = 'PingPong', input = 'PingPongRequest',
         output = 'TestResult', input_stream = false,
         output_stream = false, opts = []};
find_rpc_def_BenchmarkRunner('NetPingPong') ->
    #rpc{name = 'NetPingPong', input = 'PingPongRequest',
         output = 'TestResult', input_stream = false,
         output_stream = false, opts = []};
find_rpc_def_BenchmarkRunner('ThroughputPingPong') ->
    #rpc{name = 'ThroughputPingPong',
         input = 'ThroughputPingPongRequest',
         output = 'TestResult', input_stream = false,
         output_stream = false, opts = []};
find_rpc_def_BenchmarkRunner('NetThroughputPingPong') ->
    #rpc{name = 'NetThroughputPingPong',
         input = 'ThroughputPingPongRequest',
         output = 'TestResult', input_stream = false,
         output_stream = false, opts = []};
find_rpc_def_BenchmarkRunner('AtomicRegister') ->
    #rpc{name = 'AtomicRegister',
         input = 'AtomicRegisterRequest', output = 'TestResult',
         input_stream = false, output_stream = false, opts = []};
find_rpc_def_BenchmarkRunner('SizedThroughput') ->
    #rpc{name = 'SizedThroughput',
         input = 'SizedThroughputRequest', output = 'TestResult',
         input_stream = false, output_stream = false, opts = []};
find_rpc_def_BenchmarkRunner(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_tuple(Def) -> Def;
        error ->
            erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"kompics.benchmarks.BenchmarkRunner">>) -> 'BenchmarkRunner';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('BenchmarkRunner') -> <<"kompics.benchmarks.BenchmarkRunner">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"Ready">>) ->
    {'BenchmarkRunner', 'Ready'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"Shutdown">>) ->
    {'BenchmarkRunner', 'Shutdown'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"PingPong">>) ->
    {'BenchmarkRunner', 'PingPong'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"NetPingPong">>) ->
    {'BenchmarkRunner', 'NetPingPong'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"ThroughputPingPong">>) ->
    {'BenchmarkRunner', 'ThroughputPingPong'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"NetThroughputPingPong">>) ->
    {'BenchmarkRunner', 'NetThroughputPingPong'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"AtomicRegister">>) ->
    {'BenchmarkRunner', 'AtomicRegister'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"SizedThroughput">>) ->
    {'BenchmarkRunner', 'SizedThroughput'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('BenchmarkRunner',
                               'Ready') ->
    {<<"kompics.benchmarks.BenchmarkRunner">>, <<"Ready">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner',
                               'Shutdown') ->
    {<<"kompics.benchmarks.BenchmarkRunner">>, <<"Shutdown">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner',
                               'PingPong') ->
    {<<"kompics.benchmarks.BenchmarkRunner">>, <<"PingPong">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner',
                               'NetPingPong') ->
    {<<"kompics.benchmarks.BenchmarkRunner">>, <<"NetPingPong">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner',
                               'ThroughputPingPong') ->
    {<<"kompics.benchmarks.BenchmarkRunner">>, <<"ThroughputPingPong">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner',
                               'NetThroughputPingPong') ->
    {<<"kompics.benchmarks.BenchmarkRunner">>, <<"NetThroughputPingPong">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner',
                               'AtomicRegister') ->
    {<<"kompics.benchmarks.BenchmarkRunner">>, <<"AtomicRegister">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner',
                               'SizedThroughput') ->
    {<<"kompics.benchmarks.BenchmarkRunner">>, <<"SizedThroughput">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"kompics.benchmarks.PingPongRequest">>) -> 'PingPongRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.ThroughputPingPongRequest">>) ->
    'ThroughputPingPongRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.AtomicRegisterRequest">>) -> 'AtomicRegisterRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.SizedThroughputRequest">>) -> 'SizedThroughputRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.TestResult">>) -> 'TestResult';
fqbin_to_msg_name(<<"kompics.benchmarks.TestSuccess">>) -> 'TestSuccess';
fqbin_to_msg_name(<<"kompics.benchmarks.TestFailure">>) -> 'TestFailure';
fqbin_to_msg_name(<<"kompics.benchmarks.NotImplemented">>) -> 'NotImplemented';
fqbin_to_msg_name(<<"kompics.benchmarks.ReadyRequest">>) -> 'ReadyRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.ReadyResponse">>) -> 'ReadyResponse';
fqbin_to_msg_name(<<"kompics.benchmarks.ShutdownRequest">>) -> 'ShutdownRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.ShutdownAck">>) -> 'ShutdownAck';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('PingPongRequest') -> <<"kompics.benchmarks.PingPongRequest">>;
msg_name_to_fqbin('ThroughputPingPongRequest') ->
    <<"kompics.benchmarks.ThroughputPingPongRequest">>;
msg_name_to_fqbin('AtomicRegisterRequest') -> <<"kompics.benchmarks.AtomicRegisterRequest">>;
msg_name_to_fqbin('SizedThroughputRequest') -> <<"kompics.benchmarks.SizedThroughputRequest">>;
msg_name_to_fqbin('TestResult') -> <<"kompics.benchmarks.TestResult">>;
msg_name_to_fqbin('TestSuccess') -> <<"kompics.benchmarks.TestSuccess">>;
msg_name_to_fqbin('TestFailure') -> <<"kompics.benchmarks.TestFailure">>;
msg_name_to_fqbin('NotImplemented') -> <<"kompics.benchmarks.NotImplemented">>;
msg_name_to_fqbin('ReadyRequest') -> <<"kompics.benchmarks.ReadyRequest">>;
msg_name_to_fqbin('ReadyResponse') -> <<"kompics.benchmarks.ReadyResponse">>;
msg_name_to_fqbin('ShutdownRequest') -> <<"kompics.benchmarks.ShutdownRequest">>;
msg_name_to_fqbin('ShutdownAck') -> <<"kompics.benchmarks.ShutdownAck">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'kompics.benchmarks'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "benchmarks.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["benchmarks.proto", "messages.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["benchmarks", "messages"].


get_msg_containment("benchmarks") ->
    ['AtomicRegisterRequest',
     'PingPongRequest',
     'SizedThroughputRequest',
     'ThroughputPingPongRequest'];
get_msg_containment("messages") ->
    ['NotImplemented',
     'ReadyRequest',
     'ReadyResponse',
     'ShutdownAck',
     'ShutdownRequest',
     'TestFailure',
     'TestResult',
     'TestSuccess'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("benchmarks") -> undefined;
get_pkg_containment("messages") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("benchmarks") ->
    ['BenchmarkRunner'];
get_service_containment("messages") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("benchmarks") ->
    [{'BenchmarkRunner', 'Ready'},
     {'BenchmarkRunner', 'Shutdown'},
     {'BenchmarkRunner', 'PingPong'},
     {'BenchmarkRunner', 'NetPingPong'},
     {'BenchmarkRunner', 'ThroughputPingPong'},
     {'BenchmarkRunner', 'NetThroughputPingPong'},
     {'BenchmarkRunner', 'AtomicRegister'},
     {'BenchmarkRunner', 'SizedThroughput'}];
get_rpc_containment("messages") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("benchmarks") -> [];
get_enum_containment("messages") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.TestSuccess">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.TestResult">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ShutdownRequest">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ReadyRequest">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.NotImplemented">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ThroughputPingPongRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.SizedThroughputRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.PingPongRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.AtomicRegisterRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.TestFailure">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ReadyResponse">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ShutdownAck">>) -> "messages";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"kompics.benchmarks.BenchmarkRunner">>) ->
    "benchmarks";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.1".

gpb_version_as_list() ->
    [4,11,1].
