%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.16.0
-module(benchmarks).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type 'PingPongRequest'() ::
      #{number_of_messages      => non_neg_integer() % = 1, optional, 64 bits
       }.

-type 'ThroughputPingPongRequest'() ::
      #{messages_per_pair       => non_neg_integer(), % = 1, optional, 64 bits
        pipeline_size           => non_neg_integer(), % = 2, optional, 64 bits
        parallelism             => non_neg_integer(), % = 3, optional, 32 bits
        static_only             => boolean() | 0 | 1 % = 4, optional
       }.

-type 'AtomicRegisterRequest'() ::
      #{read_workload           => float() | integer() | infinity | '-infinity' | nan, % = 1, optional
        write_workload          => float() | integer() | infinity | '-infinity' | nan, % = 2, optional
        partition_size          => non_neg_integer(), % = 3, optional, 32 bits
        number_of_keys          => non_neg_integer() % = 4, optional, 64 bits
       }.

-type 'StreamingWindowsRequest'() ::
      #{number_of_partitions    => non_neg_integer(), % = 1, optional, 32 bits
        batch_size              => non_neg_integer(), % = 2, optional, 64 bits
        window_size             => iodata(),        % = 3, optional
        number_of_windows       => non_neg_integer(), % = 4, optional, 64 bits
        window_size_amplification => non_neg_integer() % = 5, optional, 64 bits
       }.

-type 'SizedThroughputRequest'() ::
      #{message_size            => non_neg_integer(), % = 1, optional, 32 bits
        batch_size              => non_neg_integer(), % = 2, optional, 32 bits
        number_of_batches       => non_neg_integer(), % = 3, optional, 32 bits
        number_of_pairs         => non_neg_integer() % = 4, optional, 32 bits
       }.

-type 'FibonacciRequest'() ::
      #{fib_number              => non_neg_integer() % = 1, optional, 32 bits
       }.

-type 'ChameneosRequest'() ::
      #{number_of_chameneos     => non_neg_integer(), % = 1, optional, 32 bits
        number_of_meetings      => non_neg_integer() % = 2, optional, 64 bits
       }.

-type 'APSPRequest'() ::
      #{number_of_nodes         => non_neg_integer(), % = 1, optional, 32 bits
        block_size              => non_neg_integer() % = 2, optional, 32 bits
       }.

-type 'AtomicBroadcastRequest'() ::
      #{algorithm               => iodata(),        % = 1, optional
        number_of_nodes         => non_neg_integer(), % = 2, optional, 64 bits
        number_of_proposals     => non_neg_integer(), % = 3, optional, 64 bits
        concurrent_proposals    => non_neg_integer(), % = 4, optional, 64 bits
        reconfiguration         => iodata(),        % = 5, optional
        reconfig_policy         => iodata()         % = 6, optional
       }.

-type 'TestResult'() ::
      #{sealed_value            => {success, 'TestSuccess'()} | {failure, 'TestFailure'()} | {not_implemented, 'NotImplemented'()} % oneof
       }.

-type 'TestSuccess'() ::
      #{number_of_runs          => non_neg_integer(), % = 1, optional, 32 bits
        run_results             => [float() | integer() | infinity | '-infinity' | nan] % = 2, repeated
       }.

-type 'TestFailure'() ::
      #{reason                  => iodata()         % = 1, optional
       }.

-type 'NotImplemented'() ::
      #{
       }.

-type 'ReadyRequest'() ::
      #{
       }.

-type 'ReadyResponse'() ::
      #{status                  => boolean() | 0 | 1 % = 1, optional
       }.

-type 'ShutdownRequest'() ::
      #{force                   => boolean() | 0 | 1 % = 1, optional
       }.

-type 'ShutdownAck'() ::
      #{
       }.

-export_type(['PingPongRequest'/0, 'ThroughputPingPongRequest'/0, 'AtomicRegisterRequest'/0, 'StreamingWindowsRequest'/0, 'SizedThroughputRequest'/0, 'FibonacciRequest'/0, 'ChameneosRequest'/0, 'APSPRequest'/0, 'AtomicBroadcastRequest'/0, 'TestResult'/0, 'TestSuccess'/0, 'TestFailure'/0, 'NotImplemented'/0, 'ReadyRequest'/0, 'ReadyResponse'/0, 'ShutdownRequest'/0, 'ShutdownAck'/0]).

-spec encode_msg('PingPongRequest'() | 'ThroughputPingPongRequest'() | 'AtomicRegisterRequest'() | 'StreamingWindowsRequest'() | 'SizedThroughputRequest'() | 'FibonacciRequest'() | 'ChameneosRequest'() | 'APSPRequest'() | 'AtomicBroadcastRequest'() | 'TestResult'() | 'TestSuccess'() | 'TestFailure'() | 'NotImplemented'() | 'ReadyRequest'() | 'ReadyResponse'() | 'ShutdownRequest'() | 'ShutdownAck'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-spec encode_msg('PingPongRequest'() | 'ThroughputPingPongRequest'() | 'AtomicRegisterRequest'() | 'StreamingWindowsRequest'() | 'SizedThroughputRequest'() | 'FibonacciRequest'() | 'ChameneosRequest'() | 'APSPRequest'() | 'AtomicBroadcastRequest'() | 'TestResult'() | 'TestSuccess'() | 'TestFailure'() | 'NotImplemented'() | 'ReadyRequest'() | 'ReadyResponse'() | 'ShutdownRequest'() | 'ShutdownAck'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'PingPongRequest' -> encode_msg_PingPongRequest(id(Msg, TrUserData), TrUserData);
        'ThroughputPingPongRequest' -> encode_msg_ThroughputPingPongRequest(id(Msg, TrUserData), TrUserData);
        'AtomicRegisterRequest' -> encode_msg_AtomicRegisterRequest(id(Msg, TrUserData), TrUserData);
        'StreamingWindowsRequest' -> encode_msg_StreamingWindowsRequest(id(Msg, TrUserData), TrUserData);
        'SizedThroughputRequest' -> encode_msg_SizedThroughputRequest(id(Msg, TrUserData), TrUserData);
        'FibonacciRequest' -> encode_msg_FibonacciRequest(id(Msg, TrUserData), TrUserData);
        'ChameneosRequest' -> encode_msg_ChameneosRequest(id(Msg, TrUserData), TrUserData);
        'APSPRequest' -> encode_msg_APSPRequest(id(Msg, TrUserData), TrUserData);
        'AtomicBroadcastRequest' -> encode_msg_AtomicBroadcastRequest(id(Msg, TrUserData), TrUserData);
        'TestResult' -> encode_msg_TestResult(id(Msg, TrUserData), TrUserData);
        'TestSuccess' -> encode_msg_TestSuccess(id(Msg, TrUserData), TrUserData);
        'TestFailure' -> encode_msg_TestFailure(id(Msg, TrUserData), TrUserData);
        'NotImplemented' -> encode_msg_NotImplemented(id(Msg, TrUserData), TrUserData);
        'ReadyRequest' -> encode_msg_ReadyRequest(id(Msg, TrUserData), TrUserData);
        'ReadyResponse' -> encode_msg_ReadyResponse(id(Msg, TrUserData), TrUserData);
        'ShutdownRequest' -> encode_msg_ShutdownRequest(id(Msg, TrUserData), TrUserData);
        'ShutdownAck' -> encode_msg_ShutdownAck(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_PingPongRequest(Msg, TrUserData) -> encode_msg_PingPongRequest(Msg, <<>>, TrUserData).


encode_msg_PingPongRequest(#{} = M, Bin, TrUserData) ->
    case M of
        #{number_of_messages := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_ThroughputPingPongRequest(Msg, TrUserData) -> encode_msg_ThroughputPingPongRequest(Msg, <<>>, TrUserData).


encode_msg_ThroughputPingPongRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{messages_per_pair := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{pipeline_size := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{parallelism := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{static_only := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if TrF4 =:= false -> B3;
                   true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_AtomicRegisterRequest(Msg, TrUserData) -> encode_msg_AtomicRegisterRequest(Msg, <<>>, TrUserData).


encode_msg_AtomicRegisterRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{read_workload := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0.0 -> Bin;
                        true -> e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{write_workload := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0.0 -> B1;
                        true -> e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{partition_size := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{number_of_keys := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if TrF4 =:= 0 -> B3;
                   true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_StreamingWindowsRequest(Msg, TrUserData) -> encode_msg_StreamingWindowsRequest(Msg, <<>>, TrUserData).


encode_msg_StreamingWindowsRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{number_of_partitions := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{batch_size := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{window_size := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     case is_empty_string(TrF3) of
                         true -> B2;
                         false -> e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{number_of_windows := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     if TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    case M of
        #{window_size_amplification := F5} ->
            begin
                TrF5 = id(F5, TrUserData),
                if TrF5 =:= 0 -> B4;
                   true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
                end
            end;
        _ -> B4
    end.

encode_msg_SizedThroughputRequest(Msg, TrUserData) -> encode_msg_SizedThroughputRequest(Msg, <<>>, TrUserData).


encode_msg_SizedThroughputRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{message_size := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{batch_size := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{number_of_batches := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    case M of
        #{number_of_pairs := F4} ->
            begin
                TrF4 = id(F4, TrUserData),
                if TrF4 =:= 0 -> B3;
                   true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                end
            end;
        _ -> B3
    end.

encode_msg_FibonacciRequest(Msg, TrUserData) -> encode_msg_FibonacciRequest(Msg, <<>>, TrUserData).


encode_msg_FibonacciRequest(#{} = M, Bin, TrUserData) ->
    case M of
        #{fib_number := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= 0 -> Bin;
                   true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_ChameneosRequest(Msg, TrUserData) -> encode_msg_ChameneosRequest(Msg, <<>>, TrUserData).


encode_msg_ChameneosRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{number_of_chameneos := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{number_of_meetings := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_APSPRequest(Msg, TrUserData) -> encode_msg_APSPRequest(Msg, <<>>, TrUserData).


encode_msg_APSPRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{number_of_nodes := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{block_size := F2} ->
            begin
                TrF2 = id(F2, TrUserData),
                if TrF2 =:= 0 -> B1;
                   true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                end
            end;
        _ -> B1
    end.

encode_msg_AtomicBroadcastRequest(Msg, TrUserData) -> encode_msg_AtomicBroadcastRequest(Msg, <<>>, TrUserData).


encode_msg_AtomicBroadcastRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{algorithm := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     case is_empty_string(TrF1) of
                         true -> Bin;
                         false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    B2 = case M of
             #{number_of_nodes := F2} ->
                 begin
                     TrF2 = id(F2, TrUserData),
                     if TrF2 =:= 0 -> B1;
                        true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                     end
                 end;
             _ -> B1
         end,
    B3 = case M of
             #{number_of_proposals := F3} ->
                 begin
                     TrF3 = id(F3, TrUserData),
                     if TrF3 =:= 0 -> B2;
                        true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
                     end
                 end;
             _ -> B2
         end,
    B4 = case M of
             #{concurrent_proposals := F4} ->
                 begin
                     TrF4 = id(F4, TrUserData),
                     if TrF4 =:= 0 -> B3;
                        true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
                     end
                 end;
             _ -> B3
         end,
    B5 = case M of
             #{reconfiguration := F5} ->
                 begin
                     TrF5 = id(F5, TrUserData),
                     case is_empty_string(TrF5) of
                         true -> B4;
                         false -> e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
                     end
                 end;
             _ -> B4
         end,
    case M of
        #{reconfig_policy := F6} ->
            begin
                TrF6 = id(F6, TrUserData),
                case is_empty_string(TrF6) of
                    true -> B5;
                    false -> e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
                end
            end;
        _ -> B5
    end.

encode_msg_TestResult(Msg, TrUserData) -> encode_msg_TestResult(Msg, <<>>, TrUserData).


encode_msg_TestResult(#{} = M, Bin, TrUserData) ->
    case M of
        #{sealed_value := F1} ->
            case id(F1, TrUserData) of
                {success, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_TestResult_success(TrTF1, <<Bin/binary, 10>>, TrUserData) end;
                {failure, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_TestResult_failure(TrTF1, <<Bin/binary, 18>>, TrUserData) end;
                {not_implemented, TF1} -> begin TrTF1 = id(TF1, TrUserData), e_mfield_TestResult_not_implemented(TrTF1, <<Bin/binary, 26>>, TrUserData) end
            end;
        _ -> Bin
    end.

encode_msg_TestSuccess(Msg, TrUserData) -> encode_msg_TestSuccess(Msg, <<>>, TrUserData).


encode_msg_TestSuccess(#{} = M, Bin, TrUserData) ->
    B1 = case M of
             #{number_of_runs := F1} ->
                 begin
                     TrF1 = id(F1, TrUserData),
                     if TrF1 =:= 0 -> Bin;
                        true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
                     end
                 end;
             _ -> Bin
         end,
    case M of
        #{run_results := F2} ->
            TrF2 = id(F2, TrUserData),
            if TrF2 == [] -> B1;
               true -> e_field_TestSuccess_run_results(TrF2, B1, TrUserData)
            end;
        _ -> B1
    end.

encode_msg_TestFailure(Msg, TrUserData) -> encode_msg_TestFailure(Msg, <<>>, TrUserData).


encode_msg_TestFailure(#{} = M, Bin, TrUserData) ->
    case M of
        #{reason := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                case is_empty_string(TrF1) of
                    true -> Bin;
                    false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_NotImplemented(_Msg, _TrUserData) -> <<>>.

encode_msg_ReadyRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_ReadyResponse(Msg, TrUserData) -> encode_msg_ReadyResponse(Msg, <<>>, TrUserData).


encode_msg_ReadyResponse(#{} = M, Bin, TrUserData) ->
    case M of
        #{status := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= false -> Bin;
                   true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_ShutdownRequest(Msg, TrUserData) -> encode_msg_ShutdownRequest(Msg, <<>>, TrUserData).


encode_msg_ShutdownRequest(#{} = M, Bin, TrUserData) ->
    case M of
        #{force := F1} ->
            begin
                TrF1 = id(F1, TrUserData),
                if TrF1 =:= false -> Bin;
                   true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
                end
            end;
        _ -> Bin
    end.

encode_msg_ShutdownAck(_Msg, _TrUserData) -> <<>>.

e_mfield_TestResult_success(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TestSuccess(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TestResult_failure(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_TestFailure(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TestResult_not_implemented(_Msg, Bin, _TrUserData) -> <<Bin/binary, 0>>.

e_field_TestSuccess_run_results(Elems, Bin, TrUserData) when Elems =/= [] ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_varint(length(Elems) * 8, Bin2),
    e_pfield_TestSuccess_run_results(Elems, Bin3, TrUserData);
e_field_TestSuccess_run_results([], Bin, _TrUserData) -> Bin.

e_pfield_TestSuccess_run_results([V | Rest], Bin, TrUserData) ->
    TrV = id(V, TrUserData),
    Bin2 = if is_number(TrV) -> <<Bin/binary, TrV:64/float-little>>;
              TrV =:= infinity -> <<Bin/binary, 0:48, 240, 127>>;
              TrV =:= '-infinity' -> <<Bin/binary, 0:48, 240, 255>>;
              TrV =:= nan -> <<Bin/binary, 0:48, 248, 127>>
           end,
    e_pfield_TestSuccess_run_results(Rest, Bin2, TrUserData);
e_pfield_TestSuccess_run_results([], Bin, _TrUserData) -> Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('PingPongRequest', Bin, TrUserData) -> id(decode_msg_PingPongRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ThroughputPingPongRequest', Bin, TrUserData) -> id(decode_msg_ThroughputPingPongRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AtomicRegisterRequest', Bin, TrUserData) -> id(decode_msg_AtomicRegisterRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('StreamingWindowsRequest', Bin, TrUserData) -> id(decode_msg_StreamingWindowsRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('SizedThroughputRequest', Bin, TrUserData) -> id(decode_msg_SizedThroughputRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('FibonacciRequest', Bin, TrUserData) -> id(decode_msg_FibonacciRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ChameneosRequest', Bin, TrUserData) -> id(decode_msg_ChameneosRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('APSPRequest', Bin, TrUserData) -> id(decode_msg_APSPRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AtomicBroadcastRequest', Bin, TrUserData) -> id(decode_msg_AtomicBroadcastRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TestResult', Bin, TrUserData) -> id(decode_msg_TestResult(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TestSuccess', Bin, TrUserData) -> id(decode_msg_TestSuccess(Bin, TrUserData), TrUserData);
decode_msg_2_doit('TestFailure', Bin, TrUserData) -> id(decode_msg_TestFailure(Bin, TrUserData), TrUserData);
decode_msg_2_doit('NotImplemented', Bin, TrUserData) -> id(decode_msg_NotImplemented(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ReadyRequest', Bin, TrUserData) -> id(decode_msg_ReadyRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ReadyResponse', Bin, TrUserData) -> id(decode_msg_ReadyResponse(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ShutdownRequest', Bin, TrUserData) -> id(decode_msg_ShutdownRequest(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ShutdownAck', Bin, TrUserData) -> id(decode_msg_ShutdownAck(Bin, TrUserData), TrUserData).



decode_msg_PingPongRequest(Bin, TrUserData) -> dfp_read_field_def_PingPongRequest(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_PingPongRequest(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_PingPongRequest_number_of_messages(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_PingPongRequest(<<>>, 0, 0, _, F@_1, _) -> #{number_of_messages => F@_1};
dfp_read_field_def_PingPongRequest(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_PingPongRequest(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_PingPongRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_PingPongRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_PingPongRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_PingPongRequest_number_of_messages(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_PingPongRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_PingPongRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_PingPongRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_PingPongRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_PingPongRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_PingPongRequest(<<>>, 0, 0, _, F@_1, _) -> #{number_of_messages => F@_1}.

d_field_PingPongRequest_number_of_messages(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_PingPongRequest_number_of_messages(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_PingPongRequest_number_of_messages(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_PingPongRequest(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_PingPongRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_PingPongRequest(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_PingPongRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_PingPongRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_PingPongRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_PingPongRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_PingPongRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PingPongRequest(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_PingPongRequest(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PingPongRequest(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_PingPongRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_PingPongRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_PingPongRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_PingPongRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_ThroughputPingPongRequest(Bin, TrUserData) -> dfp_read_field_def_ThroughputPingPongRequest(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id(0, TrUserData), id(false, TrUserData), TrUserData).

dfp_read_field_def_ThroughputPingPongRequest(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ThroughputPingPongRequest_messages_per_pair(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ThroughputPingPongRequest(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ThroughputPingPongRequest_pipeline_size(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ThroughputPingPongRequest(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ThroughputPingPongRequest_parallelism(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ThroughputPingPongRequest(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_ThroughputPingPongRequest_static_only(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_ThroughputPingPongRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{messages_per_pair => F@_1, pipeline_size => F@_2, parallelism => F@_3, static_only => F@_4};
dfp_read_field_def_ThroughputPingPongRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_ThroughputPingPongRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_ThroughputPingPongRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_ThroughputPingPongRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_ThroughputPingPongRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ThroughputPingPongRequest_messages_per_pair(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_ThroughputPingPongRequest_pipeline_size(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_ThroughputPingPongRequest_parallelism(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_ThroughputPingPongRequest_static_only(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ThroughputPingPongRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_ThroughputPingPongRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_ThroughputPingPongRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_ThroughputPingPongRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_ThroughputPingPongRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_ThroughputPingPongRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{messages_per_pair => F@_1, pipeline_size => F@_2, parallelism => F@_3, static_only => F@_4}.

d_field_ThroughputPingPongRequest_messages_per_pair(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    d_field_ThroughputPingPongRequest_messages_per_pair(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ThroughputPingPongRequest_messages_per_pair(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ThroughputPingPongRequest(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_ThroughputPingPongRequest_pipeline_size(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    d_field_ThroughputPingPongRequest_pipeline_size(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ThroughputPingPongRequest_pipeline_size(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ThroughputPingPongRequest(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_ThroughputPingPongRequest_parallelism(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ThroughputPingPongRequest_parallelism(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ThroughputPingPongRequest_parallelism(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ThroughputPingPongRequest(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_ThroughputPingPongRequest_static_only(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_ThroughputPingPongRequest_static_only(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_ThroughputPingPongRequest_static_only(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_ThroughputPingPongRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_ThroughputPingPongRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_ThroughputPingPongRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_ThroughputPingPongRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ThroughputPingPongRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_ThroughputPingPongRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    skip_length_delimited_ThroughputPingPongRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_ThroughputPingPongRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ThroughputPingPongRequest(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_ThroughputPingPongRequest(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ThroughputPingPongRequest(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_ThroughputPingPongRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ThroughputPingPongRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_ThroughputPingPongRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_ThroughputPingPongRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_AtomicRegisterRequest(Bin, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Bin, 0, 0, 0, id(0.0, TrUserData), id(0.0, TrUserData), id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_AtomicRegisterRequest(<<13, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_AtomicRegisterRequest_read_workload(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_AtomicRegisterRequest(<<21, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_AtomicRegisterRequest_write_workload(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_AtomicRegisterRequest(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_AtomicRegisterRequest_partition_size(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_AtomicRegisterRequest(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_AtomicRegisterRequest_number_of_keys(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_AtomicRegisterRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{read_workload => F@_1, write_workload => F@_2, partition_size => F@_3, number_of_keys => F@_4};
dfp_read_field_def_AtomicRegisterRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_AtomicRegisterRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_AtomicRegisterRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_AtomicRegisterRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_AtomicRegisterRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        13 -> d_field_AtomicRegisterRequest_read_workload(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        21 -> d_field_AtomicRegisterRequest_write_workload(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_AtomicRegisterRequest_partition_size(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_AtomicRegisterRequest_number_of_keys(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_AtomicRegisterRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_AtomicRegisterRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_AtomicRegisterRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_AtomicRegisterRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_AtomicRegisterRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_AtomicRegisterRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{read_workload => F@_1, write_workload => F@_2, partition_size => F@_3, number_of_keys => F@_4}.

d_field_AtomicRegisterRequest_read_workload(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, id(infinity, TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_AtomicRegisterRequest_read_workload(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, id('-infinity', TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_AtomicRegisterRequest_read_workload(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, id(nan, TrUserData), F@_2, F@_3, F@_4, TrUserData);
d_field_AtomicRegisterRequest_read_workload(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, _, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, id(Value, TrUserData), F@_2, F@_3, F@_4, TrUserData).

d_field_AtomicRegisterRequest_write_workload(<<0:16, 128, 127, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, F@_1, id(infinity, TrUserData), F@_3, F@_4, TrUserData);
d_field_AtomicRegisterRequest_write_workload(<<0:16, 128, 255, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, F@_1, id('-infinity', TrUserData), F@_3, F@_4, TrUserData);
d_field_AtomicRegisterRequest_write_workload(<<_:16, 1:1, _:7, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, F@_1, id(nan, TrUserData), F@_3, F@_4, TrUserData);
d_field_AtomicRegisterRequest_write_workload(<<Value:32/little-float, Rest/binary>>, Z1, Z2, F, F@_1, _, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, F@_1, id(Value, TrUserData), F@_3, F@_4, TrUserData).

d_field_AtomicRegisterRequest_partition_size(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_AtomicRegisterRequest_partition_size(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_AtomicRegisterRequest_partition_size(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AtomicRegisterRequest(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_AtomicRegisterRequest_number_of_keys(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_AtomicRegisterRequest_number_of_keys(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_AtomicRegisterRequest_number_of_keys(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AtomicRegisterRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_AtomicRegisterRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_AtomicRegisterRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_AtomicRegisterRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_AtomicRegisterRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_AtomicRegisterRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_AtomicRegisterRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AtomicRegisterRequest(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_AtomicRegisterRequest(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AtomicRegisterRequest(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_AtomicRegisterRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_AtomicRegisterRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_AtomicRegisterRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_StreamingWindowsRequest(Bin, TrUserData) -> dfp_read_field_def_StreamingWindowsRequest(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id([], TrUserData), id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_StreamingWindowsRequest(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StreamingWindowsRequest_number_of_partitions(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StreamingWindowsRequest(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StreamingWindowsRequest_batch_size(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StreamingWindowsRequest(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StreamingWindowsRequest_window_size(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StreamingWindowsRequest(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StreamingWindowsRequest_number_of_windows(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StreamingWindowsRequest(<<40, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_StreamingWindowsRequest_window_size_amplification(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_StreamingWindowsRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #{number_of_partitions => F@_1, batch_size => F@_2, window_size => F@_3, number_of_windows => F@_4, window_size_amplification => F@_5};
dfp_read_field_def_StreamingWindowsRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_StreamingWindowsRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_StreamingWindowsRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_StreamingWindowsRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_StreamingWindowsRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_StreamingWindowsRequest_number_of_partitions(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        16 -> d_field_StreamingWindowsRequest_batch_size(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_StreamingWindowsRequest_window_size(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        32 -> d_field_StreamingWindowsRequest_number_of_windows(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        40 -> d_field_StreamingWindowsRequest_window_size_amplification(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_StreamingWindowsRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_StreamingWindowsRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_StreamingWindowsRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_StreamingWindowsRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_StreamingWindowsRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_StreamingWindowsRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) -> #{number_of_partitions => F@_1, batch_size => F@_2, window_size => F@_3, number_of_windows => F@_4, window_size_amplification => F@_5}.

d_field_StreamingWindowsRequest_number_of_partitions(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_StreamingWindowsRequest_number_of_partitions(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StreamingWindowsRequest_number_of_partitions(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingWindowsRequest(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_StreamingWindowsRequest_batch_size(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_StreamingWindowsRequest_batch_size(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StreamingWindowsRequest_batch_size(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingWindowsRequest(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_StreamingWindowsRequest_window_size(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_StreamingWindowsRequest_window_size(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StreamingWindowsRequest_window_size(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_StreamingWindowsRequest(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_StreamingWindowsRequest_number_of_windows(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_StreamingWindowsRequest_number_of_windows(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StreamingWindowsRequest_number_of_windows(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingWindowsRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_StreamingWindowsRequest_window_size_amplification(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    d_field_StreamingWindowsRequest_window_size_amplification(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_StreamingWindowsRequest_window_size_amplification(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_StreamingWindowsRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_StreamingWindowsRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_StreamingWindowsRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_StreamingWindowsRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StreamingWindowsRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_StreamingWindowsRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 ->
    skip_length_delimited_StreamingWindowsRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_StreamingWindowsRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StreamingWindowsRequest(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_StreamingWindowsRequest(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StreamingWindowsRequest(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_StreamingWindowsRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StreamingWindowsRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_StreamingWindowsRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_StreamingWindowsRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_SizedThroughputRequest(Bin, TrUserData) -> dfp_read_field_def_SizedThroughputRequest(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_SizedThroughputRequest(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_SizedThroughputRequest_message_size(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SizedThroughputRequest(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_SizedThroughputRequest_batch_size(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SizedThroughputRequest(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_SizedThroughputRequest_number_of_batches(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SizedThroughputRequest(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_SizedThroughputRequest_number_of_pairs(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_SizedThroughputRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{message_size => F@_1, batch_size => F@_2, number_of_batches => F@_3, number_of_pairs => F@_4};
dfp_read_field_def_SizedThroughputRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_SizedThroughputRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_SizedThroughputRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_SizedThroughputRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_SizedThroughputRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_SizedThroughputRequest_message_size(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_SizedThroughputRequest_batch_size(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        24 -> d_field_SizedThroughputRequest_number_of_batches(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_SizedThroughputRequest_number_of_pairs(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_SizedThroughputRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_SizedThroughputRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_SizedThroughputRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_SizedThroughputRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_SizedThroughputRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_SizedThroughputRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, _) -> #{message_size => F@_1, batch_size => F@_2, number_of_batches => F@_3, number_of_pairs => F@_4}.

d_field_SizedThroughputRequest_message_size(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_SizedThroughputRequest_message_size(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_SizedThroughputRequest_message_size(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_SizedThroughputRequest(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_SizedThroughputRequest_batch_size(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_SizedThroughputRequest_batch_size(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_SizedThroughputRequest_batch_size(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_SizedThroughputRequest(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_SizedThroughputRequest_number_of_batches(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 ->
    d_field_SizedThroughputRequest_number_of_batches(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_SizedThroughputRequest_number_of_batches(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_SizedThroughputRequest(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, TrUserData).

d_field_SizedThroughputRequest_number_of_pairs(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_SizedThroughputRequest_number_of_pairs(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_SizedThroughputRequest_number_of_pairs(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_SizedThroughputRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, TrUserData).

skip_varint_SizedThroughputRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_SizedThroughputRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_SizedThroughputRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_SizedThroughputRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_SizedThroughputRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_SizedThroughputRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_SizedThroughputRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SizedThroughputRequest(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_SizedThroughputRequest(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_SizedThroughputRequest(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_SizedThroughputRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_SizedThroughputRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_SizedThroughputRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_SizedThroughputRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_FibonacciRequest(Bin, TrUserData) -> dfp_read_field_def_FibonacciRequest(Bin, 0, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_FibonacciRequest(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_FibonacciRequest_fib_number(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_FibonacciRequest(<<>>, 0, 0, _, F@_1, _) -> #{fib_number => F@_1};
dfp_read_field_def_FibonacciRequest(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_FibonacciRequest(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_FibonacciRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_FibonacciRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_FibonacciRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_FibonacciRequest_fib_number(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_FibonacciRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_FibonacciRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_FibonacciRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_FibonacciRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_FibonacciRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_FibonacciRequest(<<>>, 0, 0, _, F@_1, _) -> #{fib_number => F@_1}.

d_field_FibonacciRequest_fib_number(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_FibonacciRequest_fib_number(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_FibonacciRequest_fib_number(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_FibonacciRequest(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_FibonacciRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_FibonacciRequest(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_FibonacciRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_FibonacciRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_FibonacciRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_FibonacciRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_FibonacciRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FibonacciRequest(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_FibonacciRequest(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FibonacciRequest(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_FibonacciRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_FibonacciRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_FibonacciRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_FibonacciRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_ChameneosRequest(Bin, TrUserData) -> dfp_read_field_def_ChameneosRequest(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_ChameneosRequest(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_ChameneosRequest_number_of_chameneos(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_ChameneosRequest(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_ChameneosRequest_number_of_meetings(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_ChameneosRequest(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{number_of_chameneos => F@_1, number_of_meetings => F@_2};
dfp_read_field_def_ChameneosRequest(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_ChameneosRequest(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_ChameneosRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_ChameneosRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_ChameneosRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ChameneosRequest_number_of_chameneos(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_ChameneosRequest_number_of_meetings(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ChameneosRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_ChameneosRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_ChameneosRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_ChameneosRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_ChameneosRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_ChameneosRequest(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{number_of_chameneos => F@_1, number_of_meetings => F@_2}.

d_field_ChameneosRequest_number_of_chameneos(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_ChameneosRequest_number_of_chameneos(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_ChameneosRequest_number_of_chameneos(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ChameneosRequest(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_ChameneosRequest_number_of_meetings(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_ChameneosRequest_number_of_meetings(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_ChameneosRequest_number_of_meetings(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_ChameneosRequest(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_ChameneosRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_ChameneosRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_ChameneosRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_ChameneosRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_ChameneosRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_ChameneosRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_ChameneosRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ChameneosRequest(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_ChameneosRequest(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ChameneosRequest(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_ChameneosRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_ChameneosRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_ChameneosRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_ChameneosRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_APSPRequest(Bin, TrUserData) -> dfp_read_field_def_APSPRequest(Bin, 0, 0, 0, id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_APSPRequest(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_APSPRequest_number_of_nodes(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_APSPRequest(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_APSPRequest_block_size(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_APSPRequest(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{number_of_nodes => F@_1, block_size => F@_2};
dfp_read_field_def_APSPRequest(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_APSPRequest(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_APSPRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_APSPRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_APSPRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_APSPRequest_number_of_nodes(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        16 -> d_field_APSPRequest_block_size(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_APSPRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_APSPRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_APSPRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_APSPRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_APSPRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_APSPRequest(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{number_of_nodes => F@_1, block_size => F@_2}.

d_field_APSPRequest_number_of_nodes(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_APSPRequest_number_of_nodes(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_APSPRequest_number_of_nodes(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_APSPRequest(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_APSPRequest_block_size(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_APSPRequest_block_size(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_APSPRequest_block_size(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_APSPRequest(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_APSPRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_APSPRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_APSPRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_APSPRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_APSPRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_APSPRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_APSPRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_APSPRequest(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_APSPRequest(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_APSPRequest(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_APSPRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_APSPRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_APSPRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_APSPRequest(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_AtomicBroadcastRequest(Bin, TrUserData) -> dfp_read_field_def_AtomicBroadcastRequest(Bin, 0, 0, 0, id([], TrUserData), id(0, TrUserData), id(0, TrUserData), id(0, TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_AtomicBroadcastRequest(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_AtomicBroadcastRequest_algorithm(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_AtomicBroadcastRequest(<<16, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_AtomicBroadcastRequest_number_of_nodes(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_AtomicBroadcastRequest(<<24, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_AtomicBroadcastRequest_number_of_proposals(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_AtomicBroadcastRequest(<<32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_AtomicBroadcastRequest_concurrent_proposals(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_AtomicBroadcastRequest(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_AtomicBroadcastRequest_reconfiguration(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_AtomicBroadcastRequest(<<50, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> d_field_AtomicBroadcastRequest_reconfig_policy(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_AtomicBroadcastRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #{algorithm => F@_1, number_of_nodes => F@_2, number_of_proposals => F@_3, concurrent_proposals => F@_4, reconfiguration => F@_5, reconfig_policy => F@_6};
dfp_read_field_def_AtomicBroadcastRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dg_read_field_def_AtomicBroadcastRequest(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_AtomicBroadcastRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 32 - 7 ->
    dg_read_field_def_AtomicBroadcastRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dg_read_field_def_AtomicBroadcastRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_AtomicBroadcastRequest_algorithm(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        16 -> d_field_AtomicBroadcastRequest_number_of_nodes(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        24 -> d_field_AtomicBroadcastRequest_number_of_proposals(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        32 -> d_field_AtomicBroadcastRequest_concurrent_proposals(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        42 -> d_field_AtomicBroadcastRequest_reconfiguration(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        50 -> d_field_AtomicBroadcastRequest_reconfig_policy(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_AtomicBroadcastRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                1 -> skip_64_AtomicBroadcastRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                2 -> skip_length_delimited_AtomicBroadcastRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                3 -> skip_group_AtomicBroadcastRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
                5 -> skip_32_AtomicBroadcastRequest(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
            end
    end;
dg_read_field_def_AtomicBroadcastRequest(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #{algorithm => F@_1, number_of_nodes => F@_2, number_of_proposals => F@_3, concurrent_proposals => F@_4, reconfiguration => F@_5, reconfig_policy => F@_6}.

d_field_AtomicBroadcastRequest_algorithm(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_AtomicBroadcastRequest_algorithm(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_AtomicBroadcastRequest_algorithm(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_AtomicBroadcastRequest(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_AtomicBroadcastRequest_number_of_nodes(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_AtomicBroadcastRequest_number_of_nodes(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_AtomicBroadcastRequest_number_of_nodes(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AtomicBroadcastRequest(RestF, 0, 0, F, F@_1, NewFValue, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_AtomicBroadcastRequest_number_of_proposals(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_AtomicBroadcastRequest_number_of_proposals(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_AtomicBroadcastRequest_number_of_proposals(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AtomicBroadcastRequest(RestF, 0, 0, F, F@_1, F@_2, NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_AtomicBroadcastRequest_concurrent_proposals(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_AtomicBroadcastRequest_concurrent_proposals(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_AtomicBroadcastRequest_concurrent_proposals(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_AtomicBroadcastRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_AtomicBroadcastRequest_reconfiguration(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_AtomicBroadcastRequest_reconfiguration(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_AtomicBroadcastRequest_reconfiguration(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_AtomicBroadcastRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_AtomicBroadcastRequest_reconfig_policy(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    d_field_AtomicBroadcastRequest_reconfig_policy(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_AtomicBroadcastRequest_reconfig_policy(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_AtomicBroadcastRequest(RestF, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_AtomicBroadcastRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> skip_varint_AtomicBroadcastRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_AtomicBroadcastRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_AtomicBroadcastRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_AtomicBroadcastRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) when N < 57 ->
    skip_length_delimited_AtomicBroadcastRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_AtomicBroadcastRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AtomicBroadcastRequest(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_AtomicBroadcastRequest(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AtomicBroadcastRequest(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_AtomicBroadcastRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_AtomicBroadcastRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_AtomicBroadcastRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) -> dfp_read_field_def_AtomicBroadcastRequest(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_TestResult(Bin, TrUserData) -> dfp_read_field_def_TestResult(Bin, 0, 0, 0, id('$undef', TrUserData), TrUserData).

dfp_read_field_def_TestResult(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_TestResult_success(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_TestResult(<<18, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_TestResult_failure(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_TestResult(<<26, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_TestResult_not_implemented(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_TestResult(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{sealed_value => F@_1}
    end;
dfp_read_field_def_TestResult(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_TestResult(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_TestResult(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_TestResult(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_TestResult(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TestResult_success(Rest, 0, 0, 0, F@_1, TrUserData);
        18 -> d_field_TestResult_failure(Rest, 0, 0, 0, F@_1, TrUserData);
        26 -> d_field_TestResult_not_implemented(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TestResult(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_TestResult(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_TestResult(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_TestResult(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_TestResult(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_TestResult(<<>>, 0, 0, _, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{sealed_value => F@_1}
    end.

d_field_TestResult_success(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_TestResult_success(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_TestResult_success(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TestSuccess(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TestResult(RestF,
                                  0,
                                  0,
                                  F,
                                  case Prev of
                                      '$undef' -> id({success, NewFValue}, TrUserData);
                                      {success, MVPrev} -> id({success, merge_msg_TestSuccess(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                      _ -> id({success, NewFValue}, TrUserData)
                                  end,
                                  TrUserData).

d_field_TestResult_failure(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_TestResult_failure(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_TestResult_failure(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_TestFailure(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TestResult(RestF,
                                  0,
                                  0,
                                  F,
                                  case Prev of
                                      '$undef' -> id({failure, NewFValue}, TrUserData);
                                      {failure, MVPrev} -> id({failure, merge_msg_TestFailure(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                      _ -> id({failure, NewFValue}, TrUserData)
                                  end,
                                  TrUserData).

d_field_TestResult_not_implemented(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_TestResult_not_implemented(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_TestResult_not_implemented(<<0:1, X:7, Rest/binary>>, N, Acc, F, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_NotImplemented(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_TestResult(RestF,
                                  0,
                                  0,
                                  F,
                                  case Prev of
                                      '$undef' -> id({not_implemented, NewFValue}, TrUserData);
                                      {not_implemented, MVPrev} -> id({not_implemented, merge_msg_NotImplemented(MVPrev, NewFValue, TrUserData)}, TrUserData);
                                      _ -> id({not_implemented, NewFValue}, TrUserData)
                                  end,
                                  TrUserData).

skip_varint_TestResult(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_TestResult(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_TestResult(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TestResult(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_TestResult(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_TestResult(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_TestResult(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TestResult(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_TestResult(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TestResult(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_TestResult(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TestResult(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_TestResult(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TestResult(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_TestSuccess(Bin, TrUserData) -> dfp_read_field_def_TestSuccess(Bin, 0, 0, 0, id(0, TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_TestSuccess(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_TestSuccess_number_of_runs(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_TestSuccess(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_pfield_TestSuccess_run_results(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_TestSuccess(<<17, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_TestSuccess_run_results(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_TestSuccess(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #{number_of_runs => F@_1, run_results => lists_reverse(R1, TrUserData)};
dfp_read_field_def_TestSuccess(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_TestSuccess(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_TestSuccess(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_TestSuccess(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_TestSuccess(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_TestSuccess_number_of_runs(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_pfield_TestSuccess_run_results(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        17 -> d_field_TestSuccess_run_results(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TestSuccess(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_TestSuccess(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_TestSuccess(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_TestSuccess(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_TestSuccess(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_TestSuccess(<<>>, 0, 0, _, F@_1, R1, TrUserData) -> #{number_of_runs => F@_1, run_results => lists_reverse(R1, TrUserData)}.

d_field_TestSuccess_number_of_runs(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_TestSuccess_number_of_runs(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_TestSuccess_number_of_runs(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_TestSuccess(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_TestSuccess_run_results(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, F@_1, Prev, TrUserData) -> dfp_read_field_def_TestSuccess(Rest, Z1, Z2, F, F@_1, cons(id(infinity, TrUserData), Prev, TrUserData), TrUserData);
d_field_TestSuccess_run_results(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, F@_1, Prev, TrUserData) -> dfp_read_field_def_TestSuccess(Rest, Z1, Z2, F, F@_1, cons(id('-infinity', TrUserData), Prev, TrUserData), TrUserData);
d_field_TestSuccess_run_results(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, F@_1, Prev, TrUserData) -> dfp_read_field_def_TestSuccess(Rest, Z1, Z2, F, F@_1, cons(id(nan, TrUserData), Prev, TrUserData), TrUserData);
d_field_TestSuccess_run_results(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, F@_1, Prev, TrUserData) -> dfp_read_field_def_TestSuccess(Rest, Z1, Z2, F, F@_1, cons(id(Value, TrUserData), Prev, TrUserData), TrUserData).

d_pfield_TestSuccess_run_results(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_pfield_TestSuccess_run_results(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_pfield_TestSuccess_run_results(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_TestSuccess_run_results(PackedBytes, 0, 0, F, E, TrUserData),
    dfp_read_field_def_TestSuccess(Rest2, 0, 0, F, F@_1, NewSeq, TrUserData).

d_packed_field_TestSuccess_run_results(<<0:48, 240, 127, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_TestSuccess_run_results(Rest, Z1, Z2, F, cons(id(infinity, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_TestSuccess_run_results(<<0:48, 240, 255, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_TestSuccess_run_results(Rest, Z1, Z2, F, cons(id('-infinity', TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_TestSuccess_run_results(<<_:48, 15:4, _:4, _:1, 127:7, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_TestSuccess_run_results(Rest, Z1, Z2, F, cons(id(nan, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_TestSuccess_run_results(<<Value:64/little-float, Rest/binary>>, Z1, Z2, F, AccSeq, TrUserData) -> d_packed_field_TestSuccess_run_results(Rest, Z1, Z2, F, cons(id(Value, TrUserData), AccSeq, TrUserData), TrUserData);
d_packed_field_TestSuccess_run_results(<<>>, _, _, _, AccSeq, _) -> AccSeq.

skip_varint_TestSuccess(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_TestSuccess(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_TestSuccess(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_TestSuccess(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_TestSuccess(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_TestSuccess(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_TestSuccess(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TestSuccess(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_TestSuccess(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TestSuccess(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_TestSuccess(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_TestSuccess(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_TestSuccess(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_TestSuccess(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_TestFailure(Bin, TrUserData) -> dfp_read_field_def_TestFailure(Bin, 0, 0, 0, id([], TrUserData), TrUserData).

dfp_read_field_def_TestFailure(<<10, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_TestFailure_reason(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_TestFailure(<<>>, 0, 0, _, F@_1, _) -> #{reason => F@_1};
dfp_read_field_def_TestFailure(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_TestFailure(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_TestFailure(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_TestFailure(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_TestFailure(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_TestFailure_reason(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_TestFailure(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_TestFailure(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_TestFailure(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_TestFailure(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_TestFailure(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_TestFailure(<<>>, 0, 0, _, F@_1, _) -> #{reason => F@_1}.

d_field_TestFailure_reason(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_TestFailure_reason(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_TestFailure_reason(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_TestFailure(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_TestFailure(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_TestFailure(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_TestFailure(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TestFailure(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_TestFailure(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_TestFailure(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_TestFailure(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TestFailure(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_TestFailure(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_TestFailure(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_TestFailure(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TestFailure(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_TestFailure(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_TestFailure(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_NotImplemented(Bin, TrUserData) -> dfp_read_field_def_NotImplemented(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_NotImplemented(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_NotImplemented(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_NotImplemented(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_NotImplemented(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_NotImplemented(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_NotImplemented(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_NotImplemented(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_NotImplemented(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_NotImplemented(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_NotImplemented(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_NotImplemented(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_NotImplemented(<<>>, 0, 0, _, _) -> #{}.

skip_varint_NotImplemented(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_NotImplemented(Rest, Z1, Z2, F, TrUserData);
skip_varint_NotImplemented(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_NotImplemented(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_NotImplemented(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_NotImplemented(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_NotImplemented(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NotImplemented(Rest2, 0, 0, F, TrUserData).

skip_group_NotImplemented(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NotImplemented(Rest, 0, Z2, FNum, TrUserData).

skip_32_NotImplemented(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_NotImplemented(Rest, Z1, Z2, F, TrUserData).

skip_64_NotImplemented(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_NotImplemented(Rest, Z1, Z2, F, TrUserData).

decode_msg_ReadyRequest(Bin, TrUserData) -> dfp_read_field_def_ReadyRequest(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_ReadyRequest(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_ReadyRequest(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_ReadyRequest(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_ReadyRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_ReadyRequest(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_ReadyRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_ReadyRequest(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_ReadyRequest(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_ReadyRequest(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_ReadyRequest(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_ReadyRequest(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_ReadyRequest(<<>>, 0, 0, _, _) -> #{}.

skip_varint_ReadyRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_ReadyRequest(Rest, Z1, Z2, F, TrUserData);
skip_varint_ReadyRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_ReadyRequest(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_ReadyRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_ReadyRequest(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_ReadyRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadyRequest(Rest2, 0, 0, F, TrUserData).

skip_group_ReadyRequest(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadyRequest(Rest, 0, Z2, FNum, TrUserData).

skip_32_ReadyRequest(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_ReadyRequest(Rest, Z1, Z2, F, TrUserData).

skip_64_ReadyRequest(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_ReadyRequest(Rest, Z1, Z2, F, TrUserData).

decode_msg_ReadyResponse(Bin, TrUserData) -> dfp_read_field_def_ReadyResponse(Bin, 0, 0, 0, id(false, TrUserData), TrUserData).

dfp_read_field_def_ReadyResponse(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ReadyResponse_status(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ReadyResponse(<<>>, 0, 0, _, F@_1, _) -> #{status => F@_1};
dfp_read_field_def_ReadyResponse(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ReadyResponse(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ReadyResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ReadyResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ReadyResponse(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ReadyResponse_status(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ReadyResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ReadyResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ReadyResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ReadyResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ReadyResponse(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ReadyResponse(<<>>, 0, 0, _, F@_1, _) -> #{status => F@_1}.

d_field_ReadyResponse_status(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ReadyResponse_status(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ReadyResponse_status(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_ReadyResponse(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_ReadyResponse(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ReadyResponse(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ReadyResponse(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ReadyResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ReadyResponse(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ReadyResponse(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ReadyResponse(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ReadyResponse(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ReadyResponse(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ReadyResponse(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ReadyResponse(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ReadyResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ReadyResponse(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ReadyResponse(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_ShutdownRequest(Bin, TrUserData) -> dfp_read_field_def_ShutdownRequest(Bin, 0, 0, 0, id(false, TrUserData), TrUserData).

dfp_read_field_def_ShutdownRequest(<<8, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> d_field_ShutdownRequest_force(Rest, Z1, Z2, F, F@_1, TrUserData);
dfp_read_field_def_ShutdownRequest(<<>>, 0, 0, _, F@_1, _) -> #{force => F@_1};
dfp_read_field_def_ShutdownRequest(Other, Z1, Z2, F, F@_1, TrUserData) -> dg_read_field_def_ShutdownRequest(Other, Z1, Z2, F, F@_1, TrUserData).

dg_read_field_def_ShutdownRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_ShutdownRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
dg_read_field_def_ShutdownRequest(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_ShutdownRequest_force(Rest, 0, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_ShutdownRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                1 -> skip_64_ShutdownRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                2 -> skip_length_delimited_ShutdownRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                3 -> skip_group_ShutdownRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData);
                5 -> skip_32_ShutdownRequest(Rest, 0, 0, Key bsr 3, F@_1, TrUserData)
            end
    end;
dg_read_field_def_ShutdownRequest(<<>>, 0, 0, _, F@_1, _) -> #{force => F@_1}.

d_field_ShutdownRequest_force(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> d_field_ShutdownRequest_force(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
d_field_ShutdownRequest_force(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_ShutdownRequest(RestF, 0, 0, F, NewFValue, TrUserData).

skip_varint_ShutdownRequest(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> skip_varint_ShutdownRequest(Rest, Z1, Z2, F, F@_1, TrUserData);
skip_varint_ShutdownRequest(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ShutdownRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_length_delimited_ShutdownRequest(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) when N < 57 -> skip_length_delimited_ShutdownRequest(Rest, N + 7, X bsl N + Acc, F, F@_1, TrUserData);
skip_length_delimited_ShutdownRequest(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ShutdownRequest(Rest2, 0, 0, F, F@_1, TrUserData).

skip_group_ShutdownRequest(Bin, _, Z2, FNum, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ShutdownRequest(Rest, 0, Z2, FNum, F@_1, TrUserData).

skip_32_ShutdownRequest(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ShutdownRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

skip_64_ShutdownRequest(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, TrUserData) -> dfp_read_field_def_ShutdownRequest(Rest, Z1, Z2, F, F@_1, TrUserData).

decode_msg_ShutdownAck(Bin, TrUserData) -> dfp_read_field_def_ShutdownAck(Bin, 0, 0, 0, TrUserData).

dfp_read_field_def_ShutdownAck(<<>>, 0, 0, _, _) -> #{};
dfp_read_field_def_ShutdownAck(Other, Z1, Z2, F, TrUserData) -> dg_read_field_def_ShutdownAck(Other, Z1, Z2, F, TrUserData).

dg_read_field_def_ShutdownAck(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 32 - 7 -> dg_read_field_def_ShutdownAck(Rest, N + 7, X bsl N + Acc, F, TrUserData);
dg_read_field_def_ShutdownAck(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_ShutdownAck(Rest, 0, 0, Key bsr 3, TrUserData);
        1 -> skip_64_ShutdownAck(Rest, 0, 0, Key bsr 3, TrUserData);
        2 -> skip_length_delimited_ShutdownAck(Rest, 0, 0, Key bsr 3, TrUserData);
        3 -> skip_group_ShutdownAck(Rest, 0, 0, Key bsr 3, TrUserData);
        5 -> skip_32_ShutdownAck(Rest, 0, 0, Key bsr 3, TrUserData)
    end;
dg_read_field_def_ShutdownAck(<<>>, 0, 0, _, _) -> #{}.

skip_varint_ShutdownAck(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> skip_varint_ShutdownAck(Rest, Z1, Z2, F, TrUserData);
skip_varint_ShutdownAck(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_ShutdownAck(Rest, Z1, Z2, F, TrUserData).

skip_length_delimited_ShutdownAck(<<1:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) when N < 57 -> skip_length_delimited_ShutdownAck(Rest, N + 7, X bsl N + Acc, F, TrUserData);
skip_length_delimited_ShutdownAck(<<0:1, X:7, Rest/binary>>, N, Acc, F, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ShutdownAck(Rest2, 0, 0, F, TrUserData).

skip_group_ShutdownAck(Bin, _, Z2, FNum, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ShutdownAck(Rest, 0, Z2, FNum, TrUserData).

skip_32_ShutdownAck(<<_:32, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_ShutdownAck(Rest, Z1, Z2, F, TrUserData).

skip_64_ShutdownAck(<<_:64, Rest/binary>>, Z1, Z2, F, TrUserData) -> dfp_read_field_def_ShutdownAck(Rest, Z1, Z2, F, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'PingPongRequest' -> merge_msg_PingPongRequest(Prev, New, TrUserData);
        'ThroughputPingPongRequest' -> merge_msg_ThroughputPingPongRequest(Prev, New, TrUserData);
        'AtomicRegisterRequest' -> merge_msg_AtomicRegisterRequest(Prev, New, TrUserData);
        'StreamingWindowsRequest' -> merge_msg_StreamingWindowsRequest(Prev, New, TrUserData);
        'SizedThroughputRequest' -> merge_msg_SizedThroughputRequest(Prev, New, TrUserData);
        'FibonacciRequest' -> merge_msg_FibonacciRequest(Prev, New, TrUserData);
        'ChameneosRequest' -> merge_msg_ChameneosRequest(Prev, New, TrUserData);
        'APSPRequest' -> merge_msg_APSPRequest(Prev, New, TrUserData);
        'AtomicBroadcastRequest' -> merge_msg_AtomicBroadcastRequest(Prev, New, TrUserData);
        'TestResult' -> merge_msg_TestResult(Prev, New, TrUserData);
        'TestSuccess' -> merge_msg_TestSuccess(Prev, New, TrUserData);
        'TestFailure' -> merge_msg_TestFailure(Prev, New, TrUserData);
        'NotImplemented' -> merge_msg_NotImplemented(Prev, New, TrUserData);
        'ReadyRequest' -> merge_msg_ReadyRequest(Prev, New, TrUserData);
        'ReadyResponse' -> merge_msg_ReadyResponse(Prev, New, TrUserData);
        'ShutdownRequest' -> merge_msg_ShutdownRequest(Prev, New, TrUserData);
        'ShutdownAck' -> merge_msg_ShutdownAck(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_PingPongRequest/3}).
merge_msg_PingPongRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{number_of_messages := NFnumber_of_messages}} -> S1#{number_of_messages => NFnumber_of_messages};
        {#{number_of_messages := PFnumber_of_messages}, _} -> S1#{number_of_messages => PFnumber_of_messages};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ThroughputPingPongRequest/3}).
merge_msg_ThroughputPingPongRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{messages_per_pair := NFmessages_per_pair}} -> S1#{messages_per_pair => NFmessages_per_pair};
             {#{messages_per_pair := PFmessages_per_pair}, _} -> S1#{messages_per_pair => PFmessages_per_pair};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{pipeline_size := NFpipeline_size}} -> S2#{pipeline_size => NFpipeline_size};
             {#{pipeline_size := PFpipeline_size}, _} -> S2#{pipeline_size => PFpipeline_size};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{parallelism := NFparallelism}} -> S3#{parallelism => NFparallelism};
             {#{parallelism := PFparallelism}, _} -> S3#{parallelism => PFparallelism};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{static_only := NFstatic_only}} -> S4#{static_only => NFstatic_only};
        {#{static_only := PFstatic_only}, _} -> S4#{static_only => PFstatic_only};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_AtomicRegisterRequest/3}).
merge_msg_AtomicRegisterRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{read_workload := NFread_workload}} -> S1#{read_workload => NFread_workload};
             {#{read_workload := PFread_workload}, _} -> S1#{read_workload => PFread_workload};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{write_workload := NFwrite_workload}} -> S2#{write_workload => NFwrite_workload};
             {#{write_workload := PFwrite_workload}, _} -> S2#{write_workload => PFwrite_workload};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{partition_size := NFpartition_size}} -> S3#{partition_size => NFpartition_size};
             {#{partition_size := PFpartition_size}, _} -> S3#{partition_size => PFpartition_size};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{number_of_keys := NFnumber_of_keys}} -> S4#{number_of_keys => NFnumber_of_keys};
        {#{number_of_keys := PFnumber_of_keys}, _} -> S4#{number_of_keys => PFnumber_of_keys};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_StreamingWindowsRequest/3}).
merge_msg_StreamingWindowsRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{number_of_partitions := NFnumber_of_partitions}} -> S1#{number_of_partitions => NFnumber_of_partitions};
             {#{number_of_partitions := PFnumber_of_partitions}, _} -> S1#{number_of_partitions => PFnumber_of_partitions};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{batch_size := NFbatch_size}} -> S2#{batch_size => NFbatch_size};
             {#{batch_size := PFbatch_size}, _} -> S2#{batch_size => PFbatch_size};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{window_size := NFwindow_size}} -> S3#{window_size => NFwindow_size};
             {#{window_size := PFwindow_size}, _} -> S3#{window_size => PFwindow_size};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{number_of_windows := NFnumber_of_windows}} -> S4#{number_of_windows => NFnumber_of_windows};
             {#{number_of_windows := PFnumber_of_windows}, _} -> S4#{number_of_windows => PFnumber_of_windows};
             _ -> S4
         end,
    case {PMsg, NMsg} of
        {_, #{window_size_amplification := NFwindow_size_amplification}} -> S5#{window_size_amplification => NFwindow_size_amplification};
        {#{window_size_amplification := PFwindow_size_amplification}, _} -> S5#{window_size_amplification => PFwindow_size_amplification};
        _ -> S5
    end.

-compile({nowarn_unused_function,merge_msg_SizedThroughputRequest/3}).
merge_msg_SizedThroughputRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{message_size := NFmessage_size}} -> S1#{message_size => NFmessage_size};
             {#{message_size := PFmessage_size}, _} -> S1#{message_size => PFmessage_size};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{batch_size := NFbatch_size}} -> S2#{batch_size => NFbatch_size};
             {#{batch_size := PFbatch_size}, _} -> S2#{batch_size => PFbatch_size};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{number_of_batches := NFnumber_of_batches}} -> S3#{number_of_batches => NFnumber_of_batches};
             {#{number_of_batches := PFnumber_of_batches}, _} -> S3#{number_of_batches => PFnumber_of_batches};
             _ -> S3
         end,
    case {PMsg, NMsg} of
        {_, #{number_of_pairs := NFnumber_of_pairs}} -> S4#{number_of_pairs => NFnumber_of_pairs};
        {#{number_of_pairs := PFnumber_of_pairs}, _} -> S4#{number_of_pairs => PFnumber_of_pairs};
        _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_FibonacciRequest/3}).
merge_msg_FibonacciRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{fib_number := NFfib_number}} -> S1#{fib_number => NFfib_number};
        {#{fib_number := PFfib_number}, _} -> S1#{fib_number => PFfib_number};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ChameneosRequest/3}).
merge_msg_ChameneosRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{number_of_chameneos := NFnumber_of_chameneos}} -> S1#{number_of_chameneos => NFnumber_of_chameneos};
             {#{number_of_chameneos := PFnumber_of_chameneos}, _} -> S1#{number_of_chameneos => PFnumber_of_chameneos};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{number_of_meetings := NFnumber_of_meetings}} -> S2#{number_of_meetings => NFnumber_of_meetings};
        {#{number_of_meetings := PFnumber_of_meetings}, _} -> S2#{number_of_meetings => PFnumber_of_meetings};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_APSPRequest/3}).
merge_msg_APSPRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{number_of_nodes := NFnumber_of_nodes}} -> S1#{number_of_nodes => NFnumber_of_nodes};
             {#{number_of_nodes := PFnumber_of_nodes}, _} -> S1#{number_of_nodes => PFnumber_of_nodes};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {_, #{block_size := NFblock_size}} -> S2#{block_size => NFblock_size};
        {#{block_size := PFblock_size}, _} -> S2#{block_size => PFblock_size};
        _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AtomicBroadcastRequest/3}).
merge_msg_AtomicBroadcastRequest(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{algorithm := NFalgorithm}} -> S1#{algorithm => NFalgorithm};
             {#{algorithm := PFalgorithm}, _} -> S1#{algorithm => PFalgorithm};
             _ -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {_, #{number_of_nodes := NFnumber_of_nodes}} -> S2#{number_of_nodes => NFnumber_of_nodes};
             {#{number_of_nodes := PFnumber_of_nodes}, _} -> S2#{number_of_nodes => PFnumber_of_nodes};
             _ -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {_, #{number_of_proposals := NFnumber_of_proposals}} -> S3#{number_of_proposals => NFnumber_of_proposals};
             {#{number_of_proposals := PFnumber_of_proposals}, _} -> S3#{number_of_proposals => PFnumber_of_proposals};
             _ -> S3
         end,
    S5 = case {PMsg, NMsg} of
             {_, #{concurrent_proposals := NFconcurrent_proposals}} -> S4#{concurrent_proposals => NFconcurrent_proposals};
             {#{concurrent_proposals := PFconcurrent_proposals}, _} -> S4#{concurrent_proposals => PFconcurrent_proposals};
             _ -> S4
         end,
    S6 = case {PMsg, NMsg} of
             {_, #{reconfiguration := NFreconfiguration}} -> S5#{reconfiguration => NFreconfiguration};
             {#{reconfiguration := PFreconfiguration}, _} -> S5#{reconfiguration => PFreconfiguration};
             _ -> S5
         end,
    case {PMsg, NMsg} of
        {_, #{reconfig_policy := NFreconfig_policy}} -> S6#{reconfig_policy => NFreconfig_policy};
        {#{reconfig_policy := PFreconfig_policy}, _} -> S6#{reconfig_policy => PFreconfig_policy};
        _ -> S6
    end.

-compile({nowarn_unused_function,merge_msg_TestResult/3}).
merge_msg_TestResult(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{sealed_value := {success, OPFsealed_value}}, #{sealed_value := {success, ONFsealed_value}}} -> S1#{sealed_value => {success, merge_msg_TestSuccess(OPFsealed_value, ONFsealed_value, TrUserData)}};
        {#{sealed_value := {failure, OPFsealed_value}}, #{sealed_value := {failure, ONFsealed_value}}} -> S1#{sealed_value => {failure, merge_msg_TestFailure(OPFsealed_value, ONFsealed_value, TrUserData)}};
        {#{sealed_value := {not_implemented, OPFsealed_value}}, #{sealed_value := {not_implemented, ONFsealed_value}}} -> S1#{sealed_value => {not_implemented, merge_msg_NotImplemented(OPFsealed_value, ONFsealed_value, TrUserData)}};
        {_, #{sealed_value := NFsealed_value}} -> S1#{sealed_value => NFsealed_value};
        {#{sealed_value := PFsealed_value}, _} -> S1#{sealed_value => PFsealed_value};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_TestSuccess/3}).
merge_msg_TestSuccess(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
             {_, #{number_of_runs := NFnumber_of_runs}} -> S1#{number_of_runs => NFnumber_of_runs};
             {#{number_of_runs := PFnumber_of_runs}, _} -> S1#{number_of_runs => PFnumber_of_runs};
             _ -> S1
         end,
    case {PMsg, NMsg} of
        {#{run_results := PFrun_results}, #{run_results := NFrun_results}} -> S2#{run_results => 'erlang_++'(PFrun_results, NFrun_results, TrUserData)};
        {_, #{run_results := NFrun_results}} -> S2#{run_results => NFrun_results};
        {#{run_results := PFrun_results}, _} -> S2#{run_results => PFrun_results};
        {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_TestFailure/3}).
merge_msg_TestFailure(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{reason := NFreason}} -> S1#{reason => NFreason};
        {#{reason := PFreason}, _} -> S1#{reason => PFreason};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_NotImplemented/3}).
merge_msg_NotImplemented(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_ReadyRequest/3}).
merge_msg_ReadyRequest(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_ReadyResponse/3}).
merge_msg_ReadyResponse(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{status := NFstatus}} -> S1#{status => NFstatus};
        {#{status := PFstatus}, _} -> S1#{status => PFstatus};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ShutdownRequest/3}).
merge_msg_ShutdownRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {_, #{force := NFforce}} -> S1#{force => NFforce};
        {#{force := PFforce}, _} -> S1#{force => PFforce};
        _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_ShutdownAck/3}).
merge_msg_ShutdownAck(_Prev, New, _TrUserData) -> New.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'PingPongRequest' -> v_msg_PingPongRequest(Msg, [MsgName], TrUserData);
        'ThroughputPingPongRequest' -> v_msg_ThroughputPingPongRequest(Msg, [MsgName], TrUserData);
        'AtomicRegisterRequest' -> v_msg_AtomicRegisterRequest(Msg, [MsgName], TrUserData);
        'StreamingWindowsRequest' -> v_msg_StreamingWindowsRequest(Msg, [MsgName], TrUserData);
        'SizedThroughputRequest' -> v_msg_SizedThroughputRequest(Msg, [MsgName], TrUserData);
        'FibonacciRequest' -> v_msg_FibonacciRequest(Msg, [MsgName], TrUserData);
        'ChameneosRequest' -> v_msg_ChameneosRequest(Msg, [MsgName], TrUserData);
        'APSPRequest' -> v_msg_APSPRequest(Msg, [MsgName], TrUserData);
        'AtomicBroadcastRequest' -> v_msg_AtomicBroadcastRequest(Msg, [MsgName], TrUserData);
        'TestResult' -> v_msg_TestResult(Msg, [MsgName], TrUserData);
        'TestSuccess' -> v_msg_TestSuccess(Msg, [MsgName], TrUserData);
        'TestFailure' -> v_msg_TestFailure(Msg, [MsgName], TrUserData);
        'NotImplemented' -> v_msg_NotImplemented(Msg, [MsgName], TrUserData);
        'ReadyRequest' -> v_msg_ReadyRequest(Msg, [MsgName], TrUserData);
        'ReadyResponse' -> v_msg_ReadyResponse(Msg, [MsgName], TrUserData);
        'ShutdownRequest' -> v_msg_ShutdownRequest(Msg, [MsgName], TrUserData);
        'ShutdownAck' -> v_msg_ShutdownAck(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_PingPongRequest/3}).
-dialyzer({nowarn_function,v_msg_PingPongRequest/3}).
v_msg_PingPongRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{number_of_messages := F1} -> v_type_uint64(F1, [number_of_messages | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (number_of_messages) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_PingPongRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'PingPongRequest'}, M, Path);
v_msg_PingPongRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'PingPongRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_ThroughputPingPongRequest/3}).
-dialyzer({nowarn_function,v_msg_ThroughputPingPongRequest/3}).
v_msg_ThroughputPingPongRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{messages_per_pair := F1} -> v_type_uint64(F1, [messages_per_pair | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{pipeline_size := F2} -> v_type_uint64(F2, [pipeline_size | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{parallelism := F3} -> v_type_uint32(F3, [parallelism | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{static_only := F4} -> v_type_bool(F4, [static_only | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (messages_per_pair) -> ok;
                      (pipeline_size) -> ok;
                      (parallelism) -> ok;
                      (static_only) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ThroughputPingPongRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ThroughputPingPongRequest'}, M, Path);
v_msg_ThroughputPingPongRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ThroughputPingPongRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_AtomicRegisterRequest/3}).
-dialyzer({nowarn_function,v_msg_AtomicRegisterRequest/3}).
v_msg_AtomicRegisterRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{read_workload := F1} -> v_type_float(F1, [read_workload | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{write_workload := F2} -> v_type_float(F2, [write_workload | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{partition_size := F3} -> v_type_uint32(F3, [partition_size | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{number_of_keys := F4} -> v_type_uint64(F4, [number_of_keys | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (read_workload) -> ok;
                      (write_workload) -> ok;
                      (partition_size) -> ok;
                      (number_of_keys) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_AtomicRegisterRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'AtomicRegisterRequest'}, M, Path);
v_msg_AtomicRegisterRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'AtomicRegisterRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_StreamingWindowsRequest/3}).
-dialyzer({nowarn_function,v_msg_StreamingWindowsRequest/3}).
v_msg_StreamingWindowsRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{number_of_partitions := F1} -> v_type_uint32(F1, [number_of_partitions | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{batch_size := F2} -> v_type_uint64(F2, [batch_size | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{window_size := F3} -> v_type_string(F3, [window_size | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{number_of_windows := F4} -> v_type_uint64(F4, [number_of_windows | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{window_size_amplification := F5} -> v_type_uint64(F5, [window_size_amplification | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (number_of_partitions) -> ok;
                      (batch_size) -> ok;
                      (window_size) -> ok;
                      (number_of_windows) -> ok;
                      (window_size_amplification) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_StreamingWindowsRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'StreamingWindowsRequest'}, M, Path);
v_msg_StreamingWindowsRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'StreamingWindowsRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_SizedThroughputRequest/3}).
-dialyzer({nowarn_function,v_msg_SizedThroughputRequest/3}).
v_msg_SizedThroughputRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{message_size := F1} -> v_type_uint32(F1, [message_size | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{batch_size := F2} -> v_type_uint32(F2, [batch_size | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{number_of_batches := F3} -> v_type_uint32(F3, [number_of_batches | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{number_of_pairs := F4} -> v_type_uint32(F4, [number_of_pairs | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (message_size) -> ok;
                      (batch_size) -> ok;
                      (number_of_batches) -> ok;
                      (number_of_pairs) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_SizedThroughputRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'SizedThroughputRequest'}, M, Path);
v_msg_SizedThroughputRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'SizedThroughputRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_FibonacciRequest/3}).
-dialyzer({nowarn_function,v_msg_FibonacciRequest/3}).
v_msg_FibonacciRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{fib_number := F1} -> v_type_uint32(F1, [fib_number | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (fib_number) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_FibonacciRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'FibonacciRequest'}, M, Path);
v_msg_FibonacciRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'FibonacciRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_ChameneosRequest/3}).
-dialyzer({nowarn_function,v_msg_ChameneosRequest/3}).
v_msg_ChameneosRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{number_of_chameneos := F1} -> v_type_uint32(F1, [number_of_chameneos | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{number_of_meetings := F2} -> v_type_uint64(F2, [number_of_meetings | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (number_of_chameneos) -> ok;
                      (number_of_meetings) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ChameneosRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ChameneosRequest'}, M, Path);
v_msg_ChameneosRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ChameneosRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_APSPRequest/3}).
-dialyzer({nowarn_function,v_msg_APSPRequest/3}).
v_msg_APSPRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{number_of_nodes := F1} -> v_type_uint32(F1, [number_of_nodes | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{block_size := F2} -> v_type_uint32(F2, [block_size | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (number_of_nodes) -> ok;
                      (block_size) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_APSPRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'APSPRequest'}, M, Path);
v_msg_APSPRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'APSPRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_AtomicBroadcastRequest/3}).
-dialyzer({nowarn_function,v_msg_AtomicBroadcastRequest/3}).
v_msg_AtomicBroadcastRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{algorithm := F1} -> v_type_string(F1, [algorithm | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{number_of_nodes := F2} -> v_type_uint64(F2, [number_of_nodes | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{number_of_proposals := F3} -> v_type_uint64(F3, [number_of_proposals | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{concurrent_proposals := F4} -> v_type_uint64(F4, [concurrent_proposals | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{reconfiguration := F5} -> v_type_string(F5, [reconfiguration | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{reconfig_policy := F6} -> v_type_string(F6, [reconfig_policy | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (algorithm) -> ok;
                      (number_of_nodes) -> ok;
                      (number_of_proposals) -> ok;
                      (concurrent_proposals) -> ok;
                      (reconfiguration) -> ok;
                      (reconfig_policy) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_AtomicBroadcastRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'AtomicBroadcastRequest'}, M, Path);
v_msg_AtomicBroadcastRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'AtomicBroadcastRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_TestResult/3}).
-dialyzer({nowarn_function,v_msg_TestResult/3}).
v_msg_TestResult(#{} = M, Path, TrUserData) ->
    case M of
        #{sealed_value := {success, OF1}} -> v_msg_TestSuccess(OF1, [success, sealed_value | Path], TrUserData);
        #{sealed_value := {failure, OF1}} -> v_msg_TestFailure(OF1, [failure, sealed_value | Path], TrUserData);
        #{sealed_value := {not_implemented, OF1}} -> v_msg_NotImplemented(OF1, [not_implemented, sealed_value | Path], TrUserData);
        #{sealed_value := F1} -> mk_type_error(invalid_oneof, F1, [sealed_value | Path]);
        _ -> ok
    end,
    lists:foreach(fun (sealed_value) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_TestResult(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'TestResult'}, M, Path);
v_msg_TestResult(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TestResult'}, X, Path).

-compile({nowarn_unused_function,v_msg_TestSuccess/3}).
-dialyzer({nowarn_function,v_msg_TestSuccess/3}).
v_msg_TestSuccess(#{} = M, Path, TrUserData) ->
    case M of
        #{number_of_runs := F1} -> v_type_uint32(F1, [number_of_runs | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{run_results := F2} ->
            if is_list(F2) ->
                   _ = [v_type_double(Elem, [run_results | Path], TrUserData) || Elem <- F2],
                   ok;
               true -> mk_type_error({invalid_list_of, double}, F2, [run_results | Path])
            end;
        _ -> ok
    end,
    lists:foreach(fun (number_of_runs) -> ok;
                      (run_results) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_TestSuccess(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'TestSuccess'}, M, Path);
v_msg_TestSuccess(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TestSuccess'}, X, Path).

-compile({nowarn_unused_function,v_msg_TestFailure/3}).
-dialyzer({nowarn_function,v_msg_TestFailure/3}).
v_msg_TestFailure(#{} = M, Path, TrUserData) ->
    case M of
        #{reason := F1} -> v_type_string(F1, [reason | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (reason) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_TestFailure(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'TestFailure'}, M, Path);
v_msg_TestFailure(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'TestFailure'}, X, Path).

-compile({nowarn_unused_function,v_msg_NotImplemented/3}).
-dialyzer({nowarn_function,v_msg_NotImplemented/3}).
v_msg_NotImplemented(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_NotImplemented(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'NotImplemented'}, M, Path);
v_msg_NotImplemented(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'NotImplemented'}, X, Path).

-compile({nowarn_unused_function,v_msg_ReadyRequest/3}).
-dialyzer({nowarn_function,v_msg_ReadyRequest/3}).
v_msg_ReadyRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_ReadyRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ReadyRequest'}, M, Path);
v_msg_ReadyRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ReadyRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_ReadyResponse/3}).
-dialyzer({nowarn_function,v_msg_ReadyResponse/3}).
v_msg_ReadyResponse(#{} = M, Path, TrUserData) ->
    case M of
        #{status := F1} -> v_type_bool(F1, [status | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (status) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ReadyResponse(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ReadyResponse'}, M, Path);
v_msg_ReadyResponse(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ReadyResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_ShutdownRequest/3}).
-dialyzer({nowarn_function,v_msg_ShutdownRequest/3}).
v_msg_ShutdownRequest(#{} = M, Path, TrUserData) ->
    case M of
        #{force := F1} -> v_type_bool(F1, [force | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (force) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_ShutdownRequest(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ShutdownRequest'}, M, Path);
v_msg_ShutdownRequest(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ShutdownRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_ShutdownAck/3}).
-dialyzer({nowarn_function,v_msg_ShutdownAck/3}).
v_msg_ShutdownAck(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path) end, maps:keys(M)),
    ok;
v_msg_ShutdownAck(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [] -- maps:keys(M), 'ShutdownAck'}, M, Path);
v_msg_ShutdownAck(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'ShutdownAck'}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData) when 0 =< N, N =< 18446744073709551615 -> ok;
v_type_uint64(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint64, unsigned, 64}, N, Path);
v_type_uint64(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint64, unsigned, 64}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_float(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) -> mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) -> ok;
v_type_double(N, _Path, _TrUserData) when is_integer(N) -> ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) -> mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, 'PingPongRequest'}, [#{name => number_of_messages, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'ThroughputPingPongRequest'},
      [#{name => messages_per_pair, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []},
       #{name => pipeline_size, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []},
       #{name => parallelism, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => static_only, fnum => 4, rnum => 5, type => bool, occurrence => optional, opts => []}]},
     {{msg, 'AtomicRegisterRequest'},
      [#{name => read_workload, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []},
       #{name => write_workload, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
       #{name => partition_size, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => number_of_keys, fnum => 4, rnum => 5, type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'StreamingWindowsRequest'},
      [#{name => number_of_partitions, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
       #{name => batch_size, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []},
       #{name => window_size, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
       #{name => number_of_windows, fnum => 4, rnum => 5, type => uint64, occurrence => optional, opts => []},
       #{name => window_size_amplification, fnum => 5, rnum => 6, type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'SizedThroughputRequest'},
      [#{name => message_size, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
       #{name => batch_size, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []},
       #{name => number_of_batches, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
       #{name => number_of_pairs, fnum => 4, rnum => 5, type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'FibonacciRequest'}, [#{name => fib_number, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'ChameneosRequest'}, [#{name => number_of_chameneos, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => number_of_meetings, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []}]},
     {{msg, 'APSPRequest'}, [#{name => number_of_nodes, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => block_size, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'AtomicBroadcastRequest'},
      [#{name => algorithm, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
       #{name => number_of_nodes, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []},
       #{name => number_of_proposals, fnum => 3, rnum => 4, type => uint64, occurrence => optional, opts => []},
       #{name => concurrent_proposals, fnum => 4, rnum => 5, type => uint64, occurrence => optional, opts => []},
       #{name => reconfiguration, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []},
       #{name => reconfig_policy, fnum => 6, rnum => 7, type => string, occurrence => optional, opts => []}]},
     {{msg, 'TestResult'},
      [#{name => sealed_value, rnum => 2,
         fields =>
             [#{name => success, fnum => 1, rnum => 2, type => {msg, 'TestSuccess'}, occurrence => optional, opts => []},
              #{name => failure, fnum => 2, rnum => 2, type => {msg, 'TestFailure'}, occurrence => optional, opts => []},
              #{name => not_implemented, fnum => 3, rnum => 2, type => {msg, 'NotImplemented'}, occurrence => optional, opts => []}]}]},
     {{msg, 'TestSuccess'}, [#{name => number_of_runs, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => run_results, fnum => 2, rnum => 3, type => double, occurrence => repeated, opts => [packed]}]},
     {{msg, 'TestFailure'}, [#{name => reason, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}]},
     {{msg, 'NotImplemented'}, []},
     {{msg, 'ReadyRequest'}, []},
     {{msg, 'ReadyResponse'}, [#{name => status, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}]},
     {{msg, 'ShutdownRequest'}, [#{name => force, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}]},
     {{msg, 'ShutdownAck'}, []}].


get_msg_names() ->
    ['PingPongRequest',
     'ThroughputPingPongRequest',
     'AtomicRegisterRequest',
     'StreamingWindowsRequest',
     'SizedThroughputRequest',
     'FibonacciRequest',
     'ChameneosRequest',
     'APSPRequest',
     'AtomicBroadcastRequest',
     'TestResult',
     'TestSuccess',
     'TestFailure',
     'NotImplemented',
     'ReadyRequest',
     'ReadyResponse',
     'ShutdownRequest',
     'ShutdownAck'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['PingPongRequest',
     'ThroughputPingPongRequest',
     'AtomicRegisterRequest',
     'StreamingWindowsRequest',
     'SizedThroughputRequest',
     'FibonacciRequest',
     'ChameneosRequest',
     'APSPRequest',
     'AtomicBroadcastRequest',
     'TestResult',
     'TestSuccess',
     'TestFailure',
     'NotImplemented',
     'ReadyRequest',
     'ReadyResponse',
     'ShutdownRequest',
     'ShutdownAck'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def('PingPongRequest') -> [#{name => number_of_messages, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []}];
find_msg_def('ThroughputPingPongRequest') ->
    [#{name => messages_per_pair, fnum => 1, rnum => 2, type => uint64, occurrence => optional, opts => []},
     #{name => pipeline_size, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []},
     #{name => parallelism, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => static_only, fnum => 4, rnum => 5, type => bool, occurrence => optional, opts => []}];
find_msg_def('AtomicRegisterRequest') ->
    [#{name => read_workload, fnum => 1, rnum => 2, type => float, occurrence => optional, opts => []},
     #{name => write_workload, fnum => 2, rnum => 3, type => float, occurrence => optional, opts => []},
     #{name => partition_size, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => number_of_keys, fnum => 4, rnum => 5, type => uint64, occurrence => optional, opts => []}];
find_msg_def('StreamingWindowsRequest') ->
    [#{name => number_of_partitions, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
     #{name => batch_size, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []},
     #{name => window_size, fnum => 3, rnum => 4, type => string, occurrence => optional, opts => []},
     #{name => number_of_windows, fnum => 4, rnum => 5, type => uint64, occurrence => optional, opts => []},
     #{name => window_size_amplification, fnum => 5, rnum => 6, type => uint64, occurrence => optional, opts => []}];
find_msg_def('SizedThroughputRequest') ->
    [#{name => message_size, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []},
     #{name => batch_size, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []},
     #{name => number_of_batches, fnum => 3, rnum => 4, type => uint32, occurrence => optional, opts => []},
     #{name => number_of_pairs, fnum => 4, rnum => 5, type => uint32, occurrence => optional, opts => []}];
find_msg_def('FibonacciRequest') -> [#{name => fib_number, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}];
find_msg_def('ChameneosRequest') -> [#{name => number_of_chameneos, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => number_of_meetings, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []}];
find_msg_def('APSPRequest') -> [#{name => number_of_nodes, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => block_size, fnum => 2, rnum => 3, type => uint32, occurrence => optional, opts => []}];
find_msg_def('AtomicBroadcastRequest') ->
    [#{name => algorithm, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []},
     #{name => number_of_nodes, fnum => 2, rnum => 3, type => uint64, occurrence => optional, opts => []},
     #{name => number_of_proposals, fnum => 3, rnum => 4, type => uint64, occurrence => optional, opts => []},
     #{name => concurrent_proposals, fnum => 4, rnum => 5, type => uint64, occurrence => optional, opts => []},
     #{name => reconfiguration, fnum => 5, rnum => 6, type => string, occurrence => optional, opts => []},
     #{name => reconfig_policy, fnum => 6, rnum => 7, type => string, occurrence => optional, opts => []}];
find_msg_def('TestResult') ->
    [#{name => sealed_value, rnum => 2,
       fields =>
           [#{name => success, fnum => 1, rnum => 2, type => {msg, 'TestSuccess'}, occurrence => optional, opts => []},
            #{name => failure, fnum => 2, rnum => 2, type => {msg, 'TestFailure'}, occurrence => optional, opts => []},
            #{name => not_implemented, fnum => 3, rnum => 2, type => {msg, 'NotImplemented'}, occurrence => optional, opts => []}]}];
find_msg_def('TestSuccess') -> [#{name => number_of_runs, fnum => 1, rnum => 2, type => uint32, occurrence => optional, opts => []}, #{name => run_results, fnum => 2, rnum => 3, type => double, occurrence => repeated, opts => [packed]}];
find_msg_def('TestFailure') -> [#{name => reason, fnum => 1, rnum => 2, type => string, occurrence => optional, opts => []}];
find_msg_def('NotImplemented') -> [];
find_msg_def('ReadyRequest') -> [];
find_msg_def('ReadyResponse') -> [#{name => status, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}];
find_msg_def('ShutdownRequest') -> [#{name => force, fnum => 1, rnum => 2, type => bool, occurrence => optional, opts => []}];
find_msg_def('ShutdownAck') -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> ['BenchmarkRunner'].


get_service_def('BenchmarkRunner') ->
    {{service, 'BenchmarkRunner'},
     [#{name => 'Ready', input => 'ReadyRequest', output => 'ReadyResponse', input_stream => false, output_stream => false, opts => []},
      #{name => 'Shutdown', input => 'ShutdownRequest', output => 'ShutdownAck', input_stream => false, output_stream => false, opts => []},
      #{name => 'PingPong', input => 'PingPongRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []},
      #{name => 'NetPingPong', input => 'PingPongRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []},
      #{name => 'ThroughputPingPong', input => 'ThroughputPingPongRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []},
      #{name => 'NetThroughputPingPong', input => 'ThroughputPingPongRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []},
      #{name => 'AtomicRegister', input => 'AtomicRegisterRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []},
      #{name => 'StreamingWindows', input => 'StreamingWindowsRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []},
      #{name => 'Fibonacci', input => 'FibonacciRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []},
      #{name => 'Chameneos', input => 'ChameneosRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []},
      #{name => 'AllPairsShortestPath', input => 'APSPRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []},
      #{name => 'AtomicBroadcast', input => 'AtomicBroadcastRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []},
      #{name => 'SizedThroughput', input => 'SizedThroughputRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('BenchmarkRunner') ->
    ['Ready', 'Shutdown', 'PingPong', 'NetPingPong', 'ThroughputPingPong', 'NetThroughputPingPong', 'AtomicRegister', 'StreamingWindows', 'Fibonacci', 'Chameneos', 'AllPairsShortestPath', 'AtomicBroadcast', 'SizedThroughput'];
get_rpc_names(_) -> error.


find_rpc_def('BenchmarkRunner', RpcName) -> find_rpc_def_BenchmarkRunner(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_BenchmarkRunner('Ready') -> #{name => 'Ready', input => 'ReadyRequest', output => 'ReadyResponse', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('Shutdown') -> #{name => 'Shutdown', input => 'ShutdownRequest', output => 'ShutdownAck', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('PingPong') -> #{name => 'PingPong', input => 'PingPongRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('NetPingPong') -> #{name => 'NetPingPong', input => 'PingPongRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('ThroughputPingPong') -> #{name => 'ThroughputPingPong', input => 'ThroughputPingPongRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('NetThroughputPingPong') -> #{name => 'NetThroughputPingPong', input => 'ThroughputPingPongRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('AtomicRegister') -> #{name => 'AtomicRegister', input => 'AtomicRegisterRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('StreamingWindows') -> #{name => 'StreamingWindows', input => 'StreamingWindowsRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('Fibonacci') -> #{name => 'Fibonacci', input => 'FibonacciRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('Chameneos') -> #{name => 'Chameneos', input => 'ChameneosRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('AllPairsShortestPath') -> #{name => 'AllPairsShortestPath', input => 'APSPRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('AtomicBroadcast') -> #{name => 'AtomicBroadcast', input => 'AtomicBroadcastRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner('SizedThroughput') -> #{name => 'SizedThroughput', input => 'SizedThroughputRequest', output => 'TestResult', input_stream => false, output_stream => false, opts => []};
find_rpc_def_BenchmarkRunner(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
        Def when is_map(Def) -> Def;
        error -> erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"kompics.benchmarks.BenchmarkRunner">>) -> 'BenchmarkRunner';
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('BenchmarkRunner') -> <<"kompics.benchmarks.BenchmarkRunner">>;
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"Ready">>) -> {'BenchmarkRunner', 'Ready'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"Shutdown">>) -> {'BenchmarkRunner', 'Shutdown'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"PingPong">>) -> {'BenchmarkRunner', 'PingPong'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"NetPingPong">>) -> {'BenchmarkRunner', 'NetPingPong'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"ThroughputPingPong">>) -> {'BenchmarkRunner', 'ThroughputPingPong'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"NetThroughputPingPong">>) -> {'BenchmarkRunner', 'NetThroughputPingPong'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"AtomicRegister">>) -> {'BenchmarkRunner', 'AtomicRegister'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"StreamingWindows">>) -> {'BenchmarkRunner', 'StreamingWindows'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"Fibonacci">>) -> {'BenchmarkRunner', 'Fibonacci'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"Chameneos">>) -> {'BenchmarkRunner', 'Chameneos'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"AllPairsShortestPath">>) -> {'BenchmarkRunner', 'AllPairsShortestPath'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"AtomicBroadcast">>) -> {'BenchmarkRunner', 'AtomicBroadcast'};
fqbins_to_service_and_rpc_name(<<"kompics.benchmarks.BenchmarkRunner">>, <<"SizedThroughput">>) -> {'BenchmarkRunner', 'SizedThroughput'};
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'Ready') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"Ready">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'Shutdown') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"Shutdown">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'PingPong') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"PingPong">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'NetPingPong') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"NetPingPong">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'ThroughputPingPong') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"ThroughputPingPong">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'NetThroughputPingPong') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"NetThroughputPingPong">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'AtomicRegister') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"AtomicRegister">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'StreamingWindows') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"StreamingWindows">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'Fibonacci') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"Fibonacci">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'Chameneos') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"Chameneos">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'AllPairsShortestPath') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"AllPairsShortestPath">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'AtomicBroadcast') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"AtomicBroadcast">>};
service_and_rpc_name_to_fqbins('BenchmarkRunner', 'SizedThroughput') -> {<<"kompics.benchmarks.BenchmarkRunner">>, <<"SizedThroughput">>};
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"kompics.benchmarks.PingPongRequest">>) -> 'PingPongRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.ThroughputPingPongRequest">>) -> 'ThroughputPingPongRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.AtomicRegisterRequest">>) -> 'AtomicRegisterRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.StreamingWindowsRequest">>) -> 'StreamingWindowsRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.SizedThroughputRequest">>) -> 'SizedThroughputRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.FibonacciRequest">>) -> 'FibonacciRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.ChameneosRequest">>) -> 'ChameneosRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.APSPRequest">>) -> 'APSPRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.AtomicBroadcastRequest">>) -> 'AtomicBroadcastRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.TestResult">>) -> 'TestResult';
fqbin_to_msg_name(<<"kompics.benchmarks.TestSuccess">>) -> 'TestSuccess';
fqbin_to_msg_name(<<"kompics.benchmarks.TestFailure">>) -> 'TestFailure';
fqbin_to_msg_name(<<"kompics.benchmarks.NotImplemented">>) -> 'NotImplemented';
fqbin_to_msg_name(<<"kompics.benchmarks.ReadyRequest">>) -> 'ReadyRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.ReadyResponse">>) -> 'ReadyResponse';
fqbin_to_msg_name(<<"kompics.benchmarks.ShutdownRequest">>) -> 'ShutdownRequest';
fqbin_to_msg_name(<<"kompics.benchmarks.ShutdownAck">>) -> 'ShutdownAck';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('PingPongRequest') -> <<"kompics.benchmarks.PingPongRequest">>;
msg_name_to_fqbin('ThroughputPingPongRequest') -> <<"kompics.benchmarks.ThroughputPingPongRequest">>;
msg_name_to_fqbin('AtomicRegisterRequest') -> <<"kompics.benchmarks.AtomicRegisterRequest">>;
msg_name_to_fqbin('StreamingWindowsRequest') -> <<"kompics.benchmarks.StreamingWindowsRequest">>;
msg_name_to_fqbin('SizedThroughputRequest') -> <<"kompics.benchmarks.SizedThroughputRequest">>;
msg_name_to_fqbin('FibonacciRequest') -> <<"kompics.benchmarks.FibonacciRequest">>;
msg_name_to_fqbin('ChameneosRequest') -> <<"kompics.benchmarks.ChameneosRequest">>;
msg_name_to_fqbin('APSPRequest') -> <<"kompics.benchmarks.APSPRequest">>;
msg_name_to_fqbin('AtomicBroadcastRequest') -> <<"kompics.benchmarks.AtomicBroadcastRequest">>;
msg_name_to_fqbin('TestResult') -> <<"kompics.benchmarks.TestResult">>;
msg_name_to_fqbin('TestSuccess') -> <<"kompics.benchmarks.TestSuccess">>;
msg_name_to_fqbin('TestFailure') -> <<"kompics.benchmarks.TestFailure">>;
msg_name_to_fqbin('NotImplemented') -> <<"kompics.benchmarks.NotImplemented">>;
msg_name_to_fqbin('ReadyRequest') -> <<"kompics.benchmarks.ReadyRequest">>;
msg_name_to_fqbin('ReadyResponse') -> <<"kompics.benchmarks.ReadyResponse">>;
msg_name_to_fqbin('ShutdownRequest') -> <<"kompics.benchmarks.ShutdownRequest">>;
msg_name_to_fqbin('ShutdownAck') -> <<"kompics.benchmarks.ShutdownAck">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'kompics.benchmarks'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "benchmarks.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["benchmarks.proto", "messages.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["benchmarks", "messages"].


get_msg_containment("benchmarks") -> ['APSPRequest', 'AtomicBroadcastRequest', 'AtomicRegisterRequest', 'ChameneosRequest', 'FibonacciRequest', 'PingPongRequest', 'SizedThroughputRequest', 'StreamingWindowsRequest', 'ThroughputPingPongRequest'];
get_msg_containment("messages") -> ['NotImplemented', 'ReadyRequest', 'ReadyResponse', 'ShutdownAck', 'ShutdownRequest', 'TestFailure', 'TestResult', 'TestSuccess'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("benchmarks") -> undefined;
get_pkg_containment("messages") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("benchmarks") -> ['BenchmarkRunner'];
get_service_containment("messages") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("benchmarks") ->
    [{'BenchmarkRunner', 'Ready'},
     {'BenchmarkRunner', 'Shutdown'},
     {'BenchmarkRunner', 'PingPong'},
     {'BenchmarkRunner', 'NetPingPong'},
     {'BenchmarkRunner', 'ThroughputPingPong'},
     {'BenchmarkRunner', 'NetThroughputPingPong'},
     {'BenchmarkRunner', 'AtomicRegister'},
     {'BenchmarkRunner', 'StreamingWindows'},
     {'BenchmarkRunner', 'Fibonacci'},
     {'BenchmarkRunner', 'Chameneos'},
     {'BenchmarkRunner', 'AllPairsShortestPath'},
     {'BenchmarkRunner', 'AtomicBroadcast'},
     {'BenchmarkRunner', 'SizedThroughput'}];
get_rpc_containment("messages") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("benchmarks") -> [];
get_enum_containment("messages") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.TestSuccess">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.TestResult">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ShutdownRequest">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ReadyRequest">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.NotImplemented">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ThroughputPingPongRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.StreamingWindowsRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.SizedThroughputRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.PingPongRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.FibonacciRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ChameneosRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.AtomicRegisterRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.AtomicBroadcastRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.APSPRequest">>) -> "benchmarks";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.TestFailure">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ReadyResponse">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"kompics.benchmarks.ShutdownAck">>) -> "messages";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"kompics.benchmarks.BenchmarkRunner">>) -> "benchmarks";
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.16.0".

gpb_version_as_list() ->
    [4,16,0].
